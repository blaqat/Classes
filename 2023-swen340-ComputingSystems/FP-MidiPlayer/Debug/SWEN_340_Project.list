
SWEN_340_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  000271a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003514  08003514  000271a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003514  08003514  000271a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000071a0  20000000  0800351c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003060  200071a0  0800a6bc  000271a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a200  0800a6bc  0002a200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000271a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080f0  00000000  00000000  000271d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002104  00000000  00000000  0002f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  000313c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00031bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280da  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8c8  00000000  00000000  0005a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f80f4  00000000  00000000  00065c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dcfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fec  00000000  00000000  0015dd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200071a0 	.word	0x200071a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003188 	.word	0x08003188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200071a4 	.word	0x200071a4
 80001cc:	08003188 	.word	0x08003188

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Error_Handler>:

	return get_note_hz(octave * 12 + note_index);
}


void Error_Handler () {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// Add error handler here if desired
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
	...

080002a0 <GPIO_Init>:
 static uint8_t switch_down = 0;
 static uint8_t blue_down = 0;
 static uint32_t switch_count = 0;
 static uint8_t is_reading_buttons = 0;
void GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <GPIO_Init+0xd0>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a2d      	ldr	r2, [pc, #180]	; (8000370 <GPIO_Init+0xd0>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b2b      	ldr	r3, [pc, #172]	; (8000370 <GPIO_Init+0xd0>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80002ce:	4b28      	ldr	r3, [pc, #160]	; (8000370 <GPIO_Init+0xd0>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a27      	ldr	r2, [pc, #156]	; (8000370 <GPIO_Init+0xd0>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <GPIO_Init+0xd0>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b22      	ldr	r3, [pc, #136]	; (8000370 <GPIO_Init+0xd0>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a21      	ldr	r2, [pc, #132]	; (8000370 <GPIO_Init+0xd0>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <GPIO_Init+0xd0>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <GPIO_Init+0xd0>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <GPIO_Init+0xd0>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <GPIO_Init+0xd0>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800031c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000320:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4811      	ldr	r0, [pc, #68]	; (8000374 <GPIO_Init+0xd4>)
 800032e:	f002 f895 	bl	800245c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000336:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000338:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800033c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f002 f886 	bl	800245c <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000350:	2028      	movs	r0, #40	; 0x28
 8000352:	f001 fec7 	bl	80020e4 <HAL_NVIC_EnableIRQ>


	/* EXTI9_15_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000356:	2017      	movs	r0, #23
 8000358:	f001 fec4 	bl	80020e4 <HAL_NVIC_EnableIRQ>
	//HAL_GPIO_EXTI_IRQHandler(S1_Pin);

	counter_init(2, 1, 0);
 800035c:	2100      	movs	r1, #0
 800035e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000362:	2002      	movs	r0, #2
 8000364:	f001 fe02 	bl	8001f6c <counter_init>
}
 8000368:	bf00      	nop
 800036a:	3728      	adds	r7, #40	; 0x28
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	48000800 	.word	0x48000800

08000378 <EXTI9_5_IRQHandler>:

// Switch
void EXTI9_5_IRQHandler(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if(is_reading_buttons){ //Make sure buttons should be read
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <EXTI9_5_IRQHandler+0x64>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d024      	beq.n	80003ce <EXTI9_5_IRQHandler+0x56>
		if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) && counting_get(2) != 1){ //If has not been down in 1/10 seconds
 8000384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f002 fa10 	bl	80027b0 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d018      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x50>
 8000396:	2002      	movs	r0, #2
 8000398:	f001 fd9e 	bl	8001ed8 <counting_get>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d012      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x50>
			counter_reset(2);
 80003a2:	2002      	movs	r0, #2
 80003a4:	f001 fd86 	bl	8001eb4 <counter_reset>
			counting_start(2);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f001 fda5 	bl	8001ef8 <counting_start>
			if(!switch_down)
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <EXTI9_5_IRQHandler+0x68>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d104      	bne.n	80003c0 <EXTI9_5_IRQHandler+0x48>
				switch_count++; //Increment button pressed count
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <EXTI9_5_IRQHandler+0x6c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <EXTI9_5_IRQHandler+0x6c>)
 80003be:	6013      	str	r3, [r2, #0]
			switch_down = 1;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <EXTI9_5_IRQHandler+0x68>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e002      	b.n	80003ce <EXTI9_5_IRQHandler+0x56>

		} else {
			switch_down = 0;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <EXTI9_5_IRQHandler+0x68>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80003ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d2:	f002 fa05 	bl	80027e0 <HAL_GPIO_EXTI_IRQHandler>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200071c4 	.word	0x200071c4
 80003e0:	200071bc 	.word	0x200071bc
 80003e4:	200071c0 	.word	0x200071c0

080003e8 <EXTI15_10_IRQHandler>:

//Blue Button
void EXTI15_10_IRQHandler(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)!=1){
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <EXTI15_10_IRQHandler+0x30>)
 80003f2:	f002 f9dd 	bl	80027b0 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d003      	beq.n	8000404 <EXTI15_10_IRQHandler+0x1c>
		blue_down = 1;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <EXTI15_10_IRQHandler+0x34>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e002      	b.n	800040a <EXTI15_10_IRQHandler+0x22>
	} else {
		blue_down = 0;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI15_10_IRQHandler+0x34>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800040a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800040e:	f002 f9e7 	bl	80027e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	48000800 	.word	0x48000800
 800041c:	200071bd 	.word	0x200071bd

08000420 <get_buttons>:

GPIO_Buttons_Down get_buttons(){ //get snapshot of the button state
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	GPIO_Buttons_Down down = {blue_down, switch_down, switch_count};
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <get_buttons+0x38>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	723b      	strb	r3, [r7, #8]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <get_buttons+0x3c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	727b      	strb	r3, [r7, #9]
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <get_buttons+0x40>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
	return down;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	461a      	mov	r2, r3
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000446:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	200071bd 	.word	0x200071bd
 800045c:	200071bc 	.word	0x200071bc
 8000460:	200071c0 	.word	0x200071c0

08000464 <reset_pressed>:


void reset_pressed(){ //reset switch button down pressed count
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	switch_count = 0;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <reset_pressed+0x14>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	200071c0 	.word	0x200071c0

0800047c <set_reading_buttons>:
			LED_Off(PROJECT_LED);
		}
	}
}

void set_reading_buttons(uint8_t val){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	is_reading_buttons = !val;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf0c      	ite	eq
 800048c:	2301      	moveq	r3, #1
 800048e:	2300      	movne	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <set_reading_buttons+0x28>)
 8000496:	701a      	strb	r2, [r3, #0]
};
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	200071c4 	.word	0x200071c4

080004a8 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(uint16_t led_pin){
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80004b2:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <LED_Init+0xb8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <LED_Init+0xb8>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*led_pin));
 80004be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	2103      	movs	r1, #3
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43db      	mvns	r3, r3
 80004d0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004d4:	4013      	ands	r3, r2
 80004d6:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*led_pin);      //  Output(01)
 80004d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004ec:	4313      	orrs	r3, r2
 80004ee:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*led_pin));
 80004f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f4:	689a      	ldr	r2, [r3, #8]
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000506:	4013      	ands	r3, r2
 8000508:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*led_pin);  // High speed
 800050a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	2103      	movs	r1, #3
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800051e:	4313      	orrs	r3, r2
 8000520:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<led_pin);       // Push-pull
 8000522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000536:	4013      	ands	r3, r2
 8000538:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*led_pin));  // No pull-up, no pull-down
 800053a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	2103      	movs	r1, #3
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43db      	mvns	r3, r3
 800054c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000550:	4013      	ands	r3, r2
 8000552:	60cb      	str	r3, [r1, #12]
	
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(uint16_t led_pin){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR |= (1UL<<led_pin);
 800056e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000580:	4313      	orrs	r3, r2
 8000582:	614b      	str	r3, [r1, #20]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(uint16_t led_pin){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR &= ~(1UL<<led_pin);
 800059a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005ae:	4013      	ands	r3, r2
 80005b0:	614b      	str	r3, [r1, #20]
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(uint16_t led_pin){
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	4603      	mov	r3, r0
 80005c6:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR ^= (1UL<<led_pin);
 80005c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2101      	movs	r1, #1
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005da:	4053      	eors	r3, r2
 80005dc:	614b      	str	r3, [r1, #20]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80005f2:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <System_Clock_Init+0x1b4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a6a      	ldr	r2, [pc, #424]	; (80007a0 <System_Clock_Init+0x1b4>)
 80005f8:	f023 0307 	bic.w	r3, r3, #7
 80005fc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80005fe:	4b68      	ldr	r3, [pc, #416]	; (80007a0 <System_Clock_Init+0x1b4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a67      	ldr	r2, [pc, #412]	; (80007a0 <System_Clock_Init+0x1b4>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800060a:	4b66      	ldr	r3, [pc, #408]	; (80007a4 <System_Clock_Init+0x1b8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a65      	ldr	r2, [pc, #404]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000614:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000616:	bf00      	nop
 8000618:	4b62      	ldr	r3, [pc, #392]	; (80007a4 <System_Clock_Init+0x1b8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f9      	beq.n	8000618 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000624:	2310      	movs	r3, #16
 8000626:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000628:	4b5e      	ldr	r3, [pc, #376]	; (80007a4 <System_Clock_Init+0x1b8>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a5d      	ldr	r2, [pc, #372]	; (80007a4 <System_Clock_Init+0x1b8>)
 800062e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000632:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000634:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	061b      	lsls	r3, r3, #24
 800063c:	4959      	ldr	r1, [pc, #356]	; (80007a4 <System_Clock_Init+0x1b8>)
 800063e:	4313      	orrs	r3, r2
 8000640:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000642:	4b58      	ldr	r3, [pc, #352]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a57      	ldr	r2, [pc, #348]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800064c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800064e:	bf00      	nop
 8000650:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800065c:	d0f8      	beq.n	8000650 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800065e:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4a50      	ldr	r2, [pc, #320]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000664:	f023 0303 	bic.w	r3, r3, #3
 8000668:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <System_Clock_Init+0x1b8>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	4a4d      	ldr	r2, [pc, #308]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800067e:	4a49      	ldr	r2, [pc, #292]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000680:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000684:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000686:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800068e:	4a45      	ldr	r2, [pc, #276]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <System_Clock_Init+0x1b8>)
 800069c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80006a0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4a3f      	ldr	r2, [pc, #252]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ac:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a3c      	ldr	r2, [pc, #240]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80006ba:	bf00      	nop
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4a35      	ldr	r2, [pc, #212]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006ce:	f023 0303 	bic.w	r3, r3, #3
 80006d2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006da:	f043 0303 	orr.w	r3, r3, #3
 80006de:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80006e0:	bf00      	nop
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d1f9      	bne.n	80006e2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <System_Clock_Init+0x1b8>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000700:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000704:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <System_Clock_Init+0x1b8>)
 800070c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000710:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000718:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800071c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800071e:	bf00      	nop
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800072c:	d0f8      	beq.n	8000720 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000734:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000738:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <System_Clock_Init+0x1b8>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000740:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000744:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <System_Clock_Init+0x1b8>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000768:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800076a:	bf00      	nop
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <System_Clock_Init+0x1b8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <System_Clock_Init+0x1b8>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <System_Clock_Init+0x1b8>)
 8000780:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <System_Clock_Init+0x1b8>)
 800078a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <System_Clock_Init+0x1b8>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40022000 	.word	0x40022000
 80007a4:	40021000 	.word	0x40021000

080007a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	db0b      	blt.n	80007d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 021f 	and.w	r2, r3, #31
 80007c0:	4907      	ldr	r1, [pc, #28]	; (80007e0 <__NVIC_EnableIRQ+0x38>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	2001      	movs	r0, #1
 80007ca:	fa00 f202 	lsl.w	r2, r0, r2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <UART2_Init>:
#define TX_PIN 2
#define RX_PIN 3
static char sent_text [16];
static uint8_t has_sent_text = 0;

void UART2_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <UART2_Init+0x44>)
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <UART2_Init+0x44>)
 80007ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f2:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <UART2_Init+0x44>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <UART2_Init+0x44>)
 80007fc:	f023 030c 	bic.w	r3, r3, #12
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <UART2_Init+0x44>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <UART2_Init+0x44>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000814:	f000 f80c 	bl	8000830 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <UART2_Init+0x48>)
 800081a:	f000 f851 	bl	80008c0 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
 800081e:	2026      	movs	r0, #38	; 0x26
 8000820:	f7ff ffc2 	bl	80007a8 <__NVIC_EnableIRQ>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	40004400 	.word	0x40004400

08000830 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <UART2_GPIO_Init+0x8c>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <UART2_GPIO_Init+0x8c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800084a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800084e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800085a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800085e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800086e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800087e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800088a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800088e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000890:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800089a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800089e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80008a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008aa:	f023 030c 	bic.w	r3, r3, #12
 80008ae:	6053      	str	r3, [r2, #4]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f023 0201 	bic.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f242 028d 	movw	r2, #8333	; 0x208d
 80008fe:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f043 020c 	orr.w	r2, r3, #12
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <USART_Init+0x10c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d129      	bne.n	8000968 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f043 0220 	orr.w	r2, r3, #32
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0210 	bic.w	r2, r3, #16
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f023 0201 	bic.w	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt

	}

	if (USARTx == USART2){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <USART_Init+0x110>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d111      	bne.n	8000994 <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a1b      	ldr	r3, [r3, #32]
 8000974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <USART_Init+0x114>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <USART_Init+0x114>)
 8000982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000986:	6093      	str	r3, [r2, #8]
		USARTx->CR1 |= USART_CR1_RXNEIE;					// RXNE Interrupt
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f043 0220 	orr.w	r2, r3, #32
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f043 0201 	orr.w	r2, r3, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80009a0:	bf00      	nop
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80009ae:	bf00      	nop
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f9      	beq.n	80009b0 <USART_Init+0xf0>
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40004c00 	.word	0x40004c00
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40013800 	.word	0x40013800

080009d8 <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return (byte);
	// Reading USART_DR automatically clears the RXNE flag
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e014      	b.n	8000a14 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80009ea:	bf00      	nop
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000a06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a0a:	f000 f819 	bl	8000a40 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8e6      	bhi.n	80009ea <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000a1c:	bf00      	nop
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	61da      	str	r2, [r3, #28]
}   
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2264      	movs	r2, #100	; 0x64
 8000a4c:	fb03 f202 	mul.w	r2, r3, r2
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <USART_Delay+0x3c>)
 8000a52:	fba3 1302 	umull	r1, r3, r3, r2
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	0852      	lsrs	r2, r2, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f9      	bne.n	8000a60 <USART_Delay+0x20>
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	24924925 	.word	0x24924925

08000a80 <USART2_IRQHandler>:
		while(1);
	}
}
static uint8_t is_reading_text = 1;

void USART2_IRQHandler(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	uint8_t byte;
	static int i = 0;
		if ((USART2->ISR & USART_ISR_RXNE)){
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d04e      	beq.n	8000b30 <USART2_IRQHandler+0xb0>
			byte = USART2->RDR & 0xFF;
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000a94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	71fb      	strb	r3, [r7, #7]
			if(is_reading_text){ //If is allowed to read input
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <USART2_IRQHandler+0xbc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d045      	beq.n	8000b30 <USART2_IRQHandler+0xb0>

				if(byte == '\r'){ //If command is sent
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b0d      	cmp	r3, #13
 8000aa8:	d113      	bne.n	8000ad2 <USART2_IRQHandler+0x52>
					USART_Write(USART2, &byte, 1);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4821      	ldr	r0, [pc, #132]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000ab2:	f7ff ff91 	bl	80009d8 <USART_Write>
					byte = '\n';
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	71fb      	strb	r3, [r7, #7]

					sent_text [i] = 0;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <USART2_IRQHandler+0xc4>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	54d1      	strb	r1, [r2, r3]
					has_sent_text = 1; //text has been sent
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <USART2_IRQHandler+0xc8>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
					i = 0;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e028      	b.n	8000b24 <USART2_IRQHandler+0xa4>

				} else if(byte == '\b'){ //If backspace is pressed
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d11b      	bne.n	8000b10 <USART2_IRQHandler+0x90>

					USART_Write(USART2, &byte, 1);
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000ae0:	f7ff ff7a 	bl	80009d8 <USART_Write>
					byte = ' ';
 8000ae4:	2320      	movs	r3, #32
 8000ae6:	71fb      	strb	r3, [r7, #7]
					USART_Write(USART2, &byte, 1);
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	2201      	movs	r2, #1
 8000aec:	4619      	mov	r1, r3
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000af0:	f7ff ff72 	bl	80009d8 <USART_Write>
					byte = '\b';
 8000af4:	2308      	movs	r3, #8
 8000af6:	71fb      	strb	r3, [r7, #7]

					sent_text [i-1] = '\0';
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <USART2_IRQHandler+0xc4>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	54d1      	strb	r1, [r2, r3]
					i--;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e009      	b.n	8000b24 <USART2_IRQHandler+0xa4>

				} else { // If any text has been sent
					sent_text[i] = (char)byte;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	79f9      	ldrb	r1, [r7, #7]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <USART2_IRQHandler+0xc4>)
 8000b18:	54d1      	strb	r1, [r2, r3]
					i++;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <USART2_IRQHandler+0xc0>)
 8000b22:	6013      	str	r3, [r2, #0]
				}

				USART_Write(USART2, &byte, 1);
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	2201      	movs	r2, #1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <USART2_IRQHandler+0xb8>)
 8000b2c:	f7ff ff54 	bl	80009d8 <USART_Write>
			}
		}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200071dc 	.word	0x200071dc
 8000b44:	200071c8 	.word	0x200071c8
 8000b48:	200071d8 	.word	0x200071d8

08000b4c <get_has_text>:

uint8_t get_has_text() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	return has_sent_text;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <get_has_text+0x14>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200071d8 	.word	0x200071d8

08000b64 <get_sent_text>:

char* get_sent_text() {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	return sent_text;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <get_sent_text+0x10>)
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	200071c8 	.word	0x200071c8

08000b78 <reset_sent_text>:

void reset_sent_text() {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	has_sent_text = 0;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <reset_sent_text+0x14>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	200071d8 	.word	0x200071d8

08000b90 <set_reading>:

void set_reading(uint8_t val){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	is_reading_text = val;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <set_reading+0x1c>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	7013      	strb	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000000 	.word	0x20000000

08000bb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <HAL_DAC_MspInit+0x74>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d124      	bne.n	8000c1c <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_DAC_MspInit+0x78>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c02:	2310      	movs	r3, #16
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f001 fc20 	bl	800245c <HAL_GPIO_Init>
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40007400 	.word	0x40007400
 8000c28:	40021000 	.word	0x40021000

08000c2c <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2224      	movs	r2, #36	; 0x24
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fe3d 	bl	80028b8 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <DAC_Init+0x5c>)
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <DAC_Init+0x60>)
 8000c42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <DAC_Init+0x5c>)
 8000c46:	f001 fa5b 	bl	8002100 <HAL_DAC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <DAC_Init+0x28>
  {
    Error_Handler();
 8000c50:	f7ff fb1e 	bl	8000290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <DAC_Init+0x5c>)
 8000c70:	f001 fada 	bl	8002228 <HAL_DAC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <DAC_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f7ff fb09 	bl	8000290 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200071e0 	.word	0x200071e0
 8000c8c:	40007400 	.word	0x40007400

08000c90 <DAC_Start>:

void DAC_Start () {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DAC_Start+0x10>)
 8000c98:	f001 fa54 	bl	8002144 <HAL_DAC_Start>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200071e0 	.word	0x200071e0

08000ca4 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <DAC_Set_Value+0x1c>)
 8000cb4:	f001 fa93 	bl	80021de <HAL_DAC_SetValue>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200071e0 	.word	0x200071e0

08000cc4 <main>:
#include "demo.h"
#include "project.h"
#include "GPIO.h"
#include "adc_demo.h"
	
int main(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000cc8:	f7ff fc90 	bl	80005ec <System_Clock_Init>
	LED_Init(LED_PIN);
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f7ff fbeb 	bl	80004a8 <LED_Init>
	UART2_Init();
 8000cd2:	f7ff fd87 	bl	80007e4 <UART2_Init>
	GPIO_Init();
 8000cd6:	f7ff fae3 	bl	80002a0 <GPIO_Init>
	// application run function
	run() ;
 8000cda:	f000 f837 	bl	8000d4c <run>
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <switch_mode>:
uint8_t paused = 0;
uint8_t ti_mode = 1;
uint8_t switching_mode = 0;
uint8_t held = 0;

void switch_mode(){ //Switch mode between Local and Remote
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	if(ti_mode){
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <switch_mode+0x4c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00f      	beq.n	8000d10 <switch_mode+0x2c>
		printlf("\n\r***REMOTE LED CONTROL MENU***");
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <switch_mode+0x50>)
 8000cf2:	f000 ff75 	bl	8001be0 <printlf>
		run_command("HELP", &paused);
 8000cf6:	4910      	ldr	r1, [pc, #64]	; (8000d38 <switch_mode+0x54>)
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <switch_mode+0x58>)
 8000cfa:	f000 fd77 	bl	80017ec <run_command>
		printlf("\n\r***REMOTE MODE ACTIVE***");
 8000cfe:	4810      	ldr	r0, [pc, #64]	; (8000d40 <switch_mode+0x5c>)
 8000d00:	f000 ff6e 	bl	8001be0 <printlf>
		reset_sent_text();
 8000d04:	f7ff ff38 	bl	8000b78 <reset_sent_text>
		printf("\n\r>> ");
 8000d08:	480e      	ldr	r0, [pc, #56]	; (8000d44 <switch_mode+0x60>)
 8000d0a:	f000 ff49 	bl	8001ba0 <printf>
 8000d0e:	e002      	b.n	8000d16 <switch_mode+0x32>
	} else {
		printlf("\n\r***MANUAL OVERRIDE MODE ACTIVE***");
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <switch_mode+0x64>)
 8000d12:	f000 ff65 	bl	8001be0 <printlf>
	}
	set_reading(ti_mode);
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <switch_mode+0x4c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff38 	bl	8000b90 <set_reading>
	set_reading_buttons(ti_mode);
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <switch_mode+0x4c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fba9 	bl	800047c <set_reading_buttons>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000001 	.word	0x20000001
 8000d34:	080031a0 	.word	0x080031a0
 8000d38:	200071f4 	.word	0x200071f4
 8000d3c:	080031c0 	.word	0x080031c0
 8000d40:	080031c8 	.word	0x080031c8
 8000d44:	080031e4 	.word	0x080031e4
 8000d48:	080031ec 	.word	0x080031ec

08000d4c <run>:

void run () {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
	char* cmd = get_sent_text();
 8000d52:	f7ff ff07 	bl	8000b64 <get_sent_text>
 8000d56:	6178      	str	r0, [r7, #20]
	LED_Init(PROJECT_LED);
 8000d58:	2007      	movs	r0, #7
 8000d5a:	f7ff fba5 	bl	80004a8 <LED_Init>
	init_systick();
 8000d5e:	f000 ffbd 	bl	8001cdc <init_systick>
	init_songs();
 8000d62:	f000 fb57 	bl	8001414 <init_songs>
	switch_mode(); //Prints initial mode
 8000d66:	f7ff ffbd 	bl	8000ce4 <switch_mode>
	DAC_Init();
 8000d6a:	f7ff ff5f 	bl	8000c2c <DAC_Init>
	DAC_Start();
 8000d6e:	f7ff ff8f 	bl	8000c90 <DAC_Start>
	GPIO_Buttons_Down buttons;

	while (1) {
		//Plays the songs on the buzzer
		run_song();
 8000d72:	f000 fd13 	bl	800179c <run_song>

		buttons = get_buttons();
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb51 	bl	8000420 <get_buttons>

		//Check if Mode Is Being Switched
		if(buttons.blue_down)
 8000d7e:	793b      	ldrb	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <run+0x40>
			switching_mode = 1;
 8000d84:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <run+0x150>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e012      	b.n	8000db2 <run+0x66>
		else if(switching_mode){
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <run+0x150>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00e      	beq.n	8000db2 <run+0x66>
			ti_mode = !ti_mode;
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <run+0x154>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2301      	moveq	r3, #1
 8000d9e:	2300      	movne	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <run+0x154>)
 8000da6:	701a      	strb	r2, [r3, #0]
			switching_mode = 0;
 8000da8:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <run+0x150>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			switch_mode();
 8000dae:	f7ff ff99 	bl	8000ce4 <switch_mode>
		}

		//Timer that Runs Every Second
		if(get_second_elapsed()){
 8000db2:	f001 f845 	bl	8001e40 <get_second_elapsed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02e      	beq.n	8000e1a <run+0xce>
			//Resets second timer
			reset_second_elapsed();
 8000dbc:	f001 f849 	bl	8001e52 <reset_second_elapsed>

			//Flashes LED if paused
			if(paused == 1) LED_Toggle(PROJECT_LED);
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <run+0x158>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d102      	bne.n	8000dce <run+0x82>
 8000dc8:	2007      	movs	r0, #7
 8000dca:	f7ff fbf8 	bl	80005be <LED_Toggle>

			//Local Mode Commands
			if(!ti_mode && !buttons.switch_down){
 8000dce:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <run+0x154>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d121      	bne.n	8000e1a <run+0xce>
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d11e      	bne.n	8000e1a <run+0xce>
				reset_pressed();
 8000ddc:	f7ff fb42 	bl	8000464 <reset_pressed>

				//LONG PRESS | STOP PLAYBACK
				if(held){
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <run+0x15c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <run+0xac>
					held = 0;
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <run+0x15c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
					run_command("STOP", &paused);
 8000dee:	492d      	ldr	r1, [pc, #180]	; (8000ea4 <run+0x158>)
 8000df0:	482e      	ldr	r0, [pc, #184]	; (8000eac <run+0x160>)
 8000df2:	f000 fcfb 	bl	80017ec <run_command>
 8000df6:	e00e      	b.n	8000e16 <run+0xca>
				}

				//DOUBLE PRESS | NEXT SONG
				else if(buttons.switch_count >= 2) {
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d904      	bls.n	8000e08 <run+0xbc>
					run_command("NEXT", &paused);
 8000dfe:	4929      	ldr	r1, [pc, #164]	; (8000ea4 <run+0x158>)
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <run+0x164>)
 8000e02:	f000 fcf3 	bl	80017ec <run_command>
 8000e06:	e006      	b.n	8000e16 <run+0xca>
				}

				//SINGLE PRESS | TOGGLE PLAY
				else if(buttons.switch_count > 0) {
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <run+0xca>
					run_command("TOGGLE", &paused);
 8000e0e:	4925      	ldr	r1, [pc, #148]	; (8000ea4 <run+0x158>)
 8000e10:	4828      	ldr	r0, [pc, #160]	; (8000eb4 <run+0x168>)
 8000e12:	f000 fceb 	bl	80017ec <run_command>
				}

				reset_duration();
 8000e16:	f001 f82b 	bl	8001e70 <reset_duration>
			}

		}

		//Remote Mode Commands
		if(ti_mode && get_has_text()){
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <run+0x154>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d014      	beq.n	8000e4c <run+0x100>
 8000e22:	f7ff fe93 	bl	8000b4c <get_has_text>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00f      	beq.n	8000e4c <run+0x100>
			uint8_t keep = ti_mode;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <run+0x154>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	74fb      	strb	r3, [r7, #19]
			run_command(cmd, &paused);
 8000e32:	491c      	ldr	r1, [pc, #112]	; (8000ea4 <run+0x158>)
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f000 fcd9 	bl	80017ec <run_command>
			reset_sent_text();
 8000e3a:	f7ff fe9d 	bl	8000b78 <reset_sent_text>
			printf(">> ");
 8000e3e:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <run+0x16c>)
 8000e40:	f000 feae 	bl	8001ba0 <printf>
			ti_mode = keep;
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <run+0x154>)
 8000e46:	7cfb      	ldrb	r3, [r7, #19]
 8000e48:	7013      	strb	r3, [r2, #0]
		if(ti_mode && get_has_text()){
 8000e4a:	e026      	b.n	8000e9a <run+0x14e>
		}

		// Local Mode Constant Handler
		else if (!ti_mode){
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <run+0x154>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d18e      	bne.n	8000d72 <run+0x26>
			//Starts counting how long button down
			if(buttons.switch_down) {
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <run+0x114>
				start_duration();
 8000e5a:	f001 f813 	bl	8001e84 <start_duration>
 8000e5e:	e788      	b.n	8000d72 <run+0x26>
			}

			//Checks if button is released over a debouncer
			else if(!buttons.switch_down && counting_ended(2)){
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d185      	bne.n	8000d72 <run+0x26>
 8000e66:	2002      	movs	r0, #2
 8000e68:	f001 f86a 	bl	8001f40 <counting_ended>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f43f af7f 	beq.w	8000d72 <run+0x26>
				uint32_t held_duration = get_duration();
 8000e74:	f000 fff4 	bl	8001e60 <get_duration>
 8000e78:	60f8      	str	r0, [r7, #12]

				//If button is held over 1 second,
				if(held_duration >= 100000){
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <run+0x170>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d903      	bls.n	8000e8a <run+0x13e>
					held = 1;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <run+0x15c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e005      	b.n	8000e96 <run+0x14a>
				} else if (held_duration > 0) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <run+0x14a>
					held = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <run+0x15c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
				}

				//Resets the held button counter
				reset_duration();
 8000e96:	f000 ffeb 	bl	8001e70 <reset_duration>
		run_song();
 8000e9a:	e76a      	b.n	8000d72 <run+0x26>
 8000e9c:	200071f5 	.word	0x200071f5
 8000ea0:	20000001 	.word	0x20000001
 8000ea4:	200071f4 	.word	0x200071f4
 8000ea8:	200071f6 	.word	0x200071f6
 8000eac:	08003210 	.word	0x08003210
 8000eb0:	08003218 	.word	0x08003218
 8000eb4:	08003220 	.word	0x08003220
 8000eb8:	08003228 	.word	0x08003228
 8000ebc:	0001869f 	.word	0x0001869f

08000ec0 <midi_header>:
//This makes the entire project work.
void nothing_function(){
	printlf("");
}

Header* midi_header (song s) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	e883 0003 	stmia.w	r3, {r0, r1}
	Header* song_header = (Header *)s.p_song;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
	return convert_header(song_header);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 fe39 	bl	8001b48 <convert_header>
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <get_track>:

SongInfo song_infos[5];// = {INIT_SONGINFO(X), INIT_SONGINFO(X), INIT_SONGINFO(X), INIT_SONGINFO(X)};
TONE song_tones[5][200];

TONE* get_track(int index){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return song_tones[index];
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <get_track+0x24>)
 8000ef4:	4413      	add	r3, r2
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20007270 	.word	0x20007270

08000f08 <get_song_info>:

SongInfo get_song_info (int index) {
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	if(song_infos[index].finished == 1){
 8000f12:	495f      	ldr	r1, [pc, #380]	; (8001090 <get_song_info+0x188>)
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	330c      	adds	r3, #12
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d110      	bne.n	8000f4a <get_song_info+0x42>
		return song_infos[index];
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	4959      	ldr	r1, [pc, #356]	; (8001090 <get_song_info+0x188>)
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f44:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f48:	e09e      	b.n	8001088 <get_song_info+0x180>
	}

	SongInfo * s_info =(SongInfo *)malloc(sizeof(SongInfo));
 8000f4a:	2018      	movs	r0, #24
 8000f4c:	f001 fc96 	bl	800287c <malloc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
	song s = get_song(index);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa6e 	bl	8001440 <get_song>
	Header* h = midi_header(s);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f6c:	f7ff ffa8 	bl	8000ec0 <midi_header>
 8000f70:	6338      	str	r0, [r7, #48]	; 0x30
	uint8_t* address = s.p_song + h->len + sizeof(h->chunk_type) + sizeof(h->len);
 8000f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	4413      	add	r3, r2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Parse through tracks
	for(int i = 0; i < h->tracks; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f82:	e071      	b.n	8001068 <get_song_info+0x160>

		if(i > 1)
 8000f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	dc6a      	bgt.n	8001060 <get_song_info+0x158>
			continue;

		if(i > 0 && index>=2){// No extra credit soz
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd0f      	ble.n	8000fb0 <get_song_info+0xa8>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	dd0c      	ble.n	8000fb0 <get_song_info+0xa8>
			song_tones[index][0] = end_tone;
 8000f96:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <get_song_info+0x18c>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	6053      	str	r3, [r2, #4]
 8000fac:	6093      	str	r3, [r2, #8]
			continue;
 8000fae:	e058      	b.n	8001062 <get_song_info+0x15a>
		}

		INIT_SONGINFO(t_info);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <get_song_info+0x190>)
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <get_song_info+0x190>)
 8000fc8:	613b      	str	r3, [r7, #16]
		TONE* track = song_tones[index];
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <get_song_info+0x18c>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(i > 0)
 8000fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dd02      	ble.n	8000fe6 <get_song_info+0xde>
			t_info.tick_rate = s_info->tick_rate;
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	61fb      	str	r3, [r7, #28]

		address = parse_mtrk(address, &t_info, track); //Parse Track
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fec:	4619      	mov	r1, r3
 8000fee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ff0:	f000 f8b4 	bl	800115c <parse_mtrk>
 8000ff4:	63f8      	str	r0, [r7, #60]	; 0x3c
		address = &address[4];
 8000ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c

		if(i == 0){
 8000ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d125      	bne.n	800104e <get_song_info+0x146>
			*s_info = t_info;
 8001002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001004:	461d      	mov	r5, r3
 8001006:	f107 040c 	add.w	r4, r7, #12
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001012:	e885 0003 	stmia.w	r5, {r0, r1}
			s_info->tick_rate = s_info->tempo/h->division;
 8001016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101c:	8992      	ldrh	r2, [r2, #12]
 800101e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	611a      	str	r2, [r3, #16]
			s_info->finished = 1;
 8001026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001028:	2201      	movs	r2, #1
 800102a:	731a      	strb	r2, [r3, #12]
			song_infos[index] = *s_info; //Memoization for song info for quick retrieval
 800102c:	4918      	ldr	r1, [pc, #96]	; (8001090 <get_song_info+0x188>)
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	18ca      	adds	r2, r1, r3
 800103a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103c:	4614      	mov	r4, r2
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001048:	e884 0003 	stmia.w	r4, {r0, r1}
 800104c:	e009      	b.n	8001062 <get_song_info+0x15a>
		} else {
			free(t_info.copyright);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fc1b 	bl	800288c <free>
			free(t_info.title);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fc17 	bl	800288c <free>
 800105e:	e000      	b.n	8001062 <get_song_info+0x15a>
			continue;
 8001060:	bf00      	nop
	for(int i = 0; i < h->tracks; i++){
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	3301      	adds	r3, #1
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
 8001068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106a:	895b      	ldrh	r3, [r3, #10]
 800106c:	461a      	mov	r2, r3
 800106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001070:	4293      	cmp	r3, r2
 8001072:	db87      	blt.n	8000f84 <get_song_info+0x7c>

		}
	}

	return *s_info;
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001078:	4614      	mov	r4, r2
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001084:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	3740      	adds	r7, #64	; 0x40
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	200071f8 	.word	0x200071f8
 8001094:	20007270 	.word	0x20007270
 8001098:	08003230 	.word	0x08003230

0800109c <parse_meta_event>:

/*
 * Parses Through Meta Events for Title/Track Name, Copyright, and Tempo
 */
uint8_t* parse_meta_event(uint8_t* buffer, SongInfo* s_info) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	//Skip 00 Delta Time
	buffer++;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3301      	adds	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
	uint8_t meta_event_type = buffer[1];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	77fb      	strb	r3, [r7, #31]
	uint32_t meta_event_length;
	buffer += 2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3302      	adds	r3, #2
 80010b6:	607b      	str	r3, [r7, #4]

	//Get Meta Event Length
	buffer += get_delay(buffer, &meta_event_length);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f8f2 	bl	80012a8 <get_delay>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	607b      	str	r3, [r7, #4]

	// Sequence/Track Name
	if (meta_event_type == 0x03) {
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d115      	bne.n	8001100 <parse_meta_event+0x64>
	    char *title = (char *)malloc(meta_event_length + 1);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fbcf 	bl	800287c <malloc>
 80010de:	4603      	mov	r3, r0
 80010e0:	613b      	str	r3, [r7, #16]
	    memcpy(title, buffer, meta_event_length);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	461a      	mov	r2, r3
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	6938      	ldr	r0, [r7, #16]
 80010ea:	f001 fbd7 	bl	800289c <memcpy>
		title[meta_event_length] = '\0';
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

		s_info->title = title;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e023      	b.n	8001148 <parse_meta_event+0xac>
	}

	// Copyright Notice
	else if (meta_event_type == 0x02) {
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d115      	bne.n	8001132 <parse_meta_event+0x96>
		char *cp = (char *)malloc(meta_event_length + 1);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fbb6 	bl	800287c <malloc>
 8001110:	4603      	mov	r3, r0
 8001112:	617b      	str	r3, [r7, #20]
        memcpy(cp, buffer, meta_event_length);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	461a      	mov	r2, r3
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f001 fbbe 	bl	800289c <memcpy>
        cp[meta_event_length] = '\0';
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]

		s_info->copyright = cp;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	e00a      	b.n	8001148 <parse_meta_event+0xac>
	}

	// Tempo
	else if (meta_event_type == 0x51) {
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b51      	cmp	r3, #81	; 0x51
 8001136:	d107      	bne.n	8001148 <parse_meta_event+0xac>
		uint24_t* tempo = (uint24_t*)convert_to_uint24(buffer);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fcea 	bl	8001b12 <convert_to_uint24>
 800113e:	4603      	mov	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]

		s_info->tempo = (unsigned int)tempo;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	609a      	str	r2, [r3, #8]
	}

	buffer += meta_event_length;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	607b      	str	r3, [r7, #4]

	return buffer;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <parse_mtrk>:

/*
 * Parses through Tracks for note events
 */
uint8_t* parse_mtrk (uint8_t* buffer, SongInfo* s_info, TONE* track){
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b091      	sub	sp, #68	; 0x44
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	int index = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Get Track Length and End Point of track
	uint32_t mtrk_length = convert_to_uint32(buffer + 4);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3304      	adds	r3, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fcb1 	bl	8001ad8 <convert_to_uint32>
 8001176:	63b8      	str	r0, [r7, #56]	; 0x38
	uint8_t * stop = buffer + mtrk_length;
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	4413      	add	r3, r2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
	buffer += 8;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3308      	adds	r3, #8
 8001184:	60fb      	str	r3, [r7, #12]

	while (buffer < stop) {
 8001186:	e076      	b.n	8001276 <parse_mtrk+0x11a>
		uint32_t delta_time;
		uint8_t results[5] = {0};
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		//Check if is a Meta-Event
		if (buffer[1] == 0xFF) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d105      	bne.n	80011a8 <parse_mtrk+0x4c>
			buffer = parse_meta_event(buffer, s_info);
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff7c 	bl	800109c <parse_meta_event>
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	e066      	b.n	8001276 <parse_mtrk+0x11a>
		}

		//Else, Parse the midi event
		else {
			buffer = parse_midi_event(buffer, &delta_time, results);
 80011a8:	f107 0220 	add.w	r2, r7, #32
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	4619      	mov	r1, r3
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 f8cf 	bl	8001356 <parse_midi_event>
 80011b8:	60f8      	str	r0, [r7, #12]

		    uint8_t event_type = results[0];
 80011ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		    //Check if Event Type is Note On or Note Off
			if(event_type == 0b1000 || event_type == 0b1001 ){
 80011c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d003      	beq.n	80011d2 <parse_mtrk+0x76>
 80011ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d14e      	bne.n	8001270 <parse_mtrk+0x114>

				uint8_t is_playing = results[2];
 80011d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				uint8_t note = results[3];
 80011da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				uint8_t velocity = results[4];
 80011e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				int freq = hertz_to_duration(get_note_hz(note));
 80011ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f93e 	bl	8001470 <get_note_hz>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	f000 f94c 	bl	8001498 <hertz_to_duration>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	ee17 3a90 	vmov	r3, s15
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c

				TONE this = {
 800120e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001212:	753b      	strb	r3, [r7, #20]
					note,
					velocity = is_playing * velocity, //If note is not playing, velocity = 0
 8001214:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001218:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800121c:	fb12 f303 	smulbb	r3, r2, r3
 8001220:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				TONE this = {
 8001224:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001228:	757b      	strb	r3, [r7, #21]
					(float)(delta_time * s_info->tick_rate / 10),
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <parse_mtrk+0x148>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	08db      	lsrs	r3, r3, #3
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
				TONE this = {
 8001244:	edc7 7a06 	vstr	s15, [r7, #24]
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	61fb      	str	r3, [r7, #28]
					freq
				};

				//Save the note data into the next spot in the note sequence
				track[index] = this;
 800124c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	461c      	mov	r4, r3
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				index++;
 800126a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800126c:	3301      	adds	r3, #1
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

		    buffer++;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
	while (buffer < stop) {
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127a:	429a      	cmp	r2, r3
 800127c:	d384      	bcc.n	8001188 <parse_mtrk+0x2c>
		}
	}

	//Mark the end of the song in the sequence
	track[index] = end_tone;
 800127e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	461a      	mov	r2, r3
 8001290:	2300      	movs	r3, #0
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	6053      	str	r3, [r2, #4]
 8001296:	6093      	str	r3, [r2, #8]

	return buffer;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3744      	adds	r7, #68	; 0x44
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	cccccccd 	.word	0xcccccccd

080012a8 <get_delay>:
/*
 * The function should place the calculated delay into the delay variable and
 * return the number of bytes that were used to calculate the delay.
 */

uint8_t get_delay (uint8_t* buffer, uint32_t* delay){
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	*delay = *buffer & 0x7f; //mask off first bit
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	601a      	str	r2, [r3, #0]

	uint8_t bytes = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]

	while(*buffer >> 7){
 80012c2:	e010      	b.n	80012e6 <get_delay+0x3e>
		bytes++;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3301      	adds	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
		buffer++;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
		*delay = ( *delay << 8 | ( *buffer & 0x7f ) << 1 ) >> 1;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	021a      	lsls	r2, r3, #8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	085a      	lsrs	r2, r3, #1
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	601a      	str	r2, [r3, #0]
	while(*buffer >> 7){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dbe9      	blt.n	80012c4 <get_delay+0x1c>
	}

	return bytes;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <get_midi_event>:

/*
 * Parses the midi event after a delay for the event type and channel effected
 */

uint8_t* get_midi_event(uint8_t* buffer, uint8_t bytes, uint8_t* event, uint8_t* channel){
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	460b      	mov	r3, r1
 800130c:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < bytes; i++){
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e005      	b.n	8001320 <get_midi_event+0x22>
		buffer++;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < bytes; i++){
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf5      	blt.n	8001314 <get_midi_event+0x16>
	}

	*event = *buffer>>4;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	701a      	strb	r2, [r3, #0]
	*channel = *buffer&0x0F;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2da      	uxtb	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	701a      	strb	r2, [r3, #0]

	buffer++;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]

	return buffer;
 8001348:	68fb      	ldr	r3, [r7, #12]
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <parse_midi_event>:

/*
 * Parses midi event buffer for values of note and velocity
 */

uint8_t* parse_midi_event(uint8_t* buffer, uint32_t* delay, uint8_t results[]){
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
	uint8_t event_type = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	757b      	strb	r3, [r7, #21]
	uint8_t channel_no = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	753b      	strb	r3, [r7, #20]

	uint8_t* address = get_midi_event(buffer, get_delay(buffer, delay), &event_type, &channel_no);
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ff9b 	bl	80012a8 <get_delay>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	f107 0215 	add.w	r2, r7, #21
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff ffbd 	bl	80012fe <get_midi_event>
 8001384:	61f8      	str	r0, [r7, #28]

	results[0] = event_type;
 8001386:	7d7a      	ldrb	r2, [r7, #21]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	701a      	strb	r2, [r3, #0]
	results[1] = channel_no;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	7d3a      	ldrb	r2, [r7, #20]
 8001392:	701a      	strb	r2, [r3, #0]
	if(event_type == 0b1000 || event_type == 0b1001 ){ // Note On/Off
 8001394:	7d7b      	ldrb	r3, [r7, #21]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d002      	beq.n	80013a0 <parse_midi_event+0x4a>
 800139a:	7d7b      	ldrb	r3, [r7, #21]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d11f      	bne.n	80013e0 <parse_midi_event+0x8a>
		uint8_t note = *address & 0x7f;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a8:	75fb      	strb	r3, [r7, #23]
		address++;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
		uint8_t velocity = *address & 0x7f;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b8:	75bb      	strb	r3, [r7, #22]
		results[2] = event_type == 0b1001; //if note is playing
 80013ba:	7d7b      	ldrb	r3, [r7, #21]
 80013bc:	2b09      	cmp	r3, #9
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3302      	adds	r3, #2
 80013ca:	701a      	strb	r2, [r3, #0]
		results[3] = note;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3303      	adds	r3, #3
 80013d0:	7dfa      	ldrb	r2, [r7, #23]
 80013d2:	701a      	strb	r2, [r3, #0]
		results[4] = velocity;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3304      	adds	r3, #4
 80013d8:	7dba      	ldrb	r2, [r7, #22]
 80013da:	701a      	strb	r2, [r3, #0]
		return address;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	e015      	b.n	800140c <parse_midi_event+0xb6>
	} else {
		for(int i = 0; i < !(event_type == 0b1100 || event_type == 0b1101); i++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	e005      	b.n	80013f2 <parse_midi_event+0x9c>
			address++;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < !(event_type == 0b1100 || event_type == 0b1101); i++){
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	7d7b      	ldrb	r3, [r7, #21]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d004      	beq.n	8001402 <parse_midi_event+0xac>
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d001      	beq.n	8001402 <parse_midi_event+0xac>
 80013fe:	2201      	movs	r2, #1
 8001400:	e000      	b.n	8001404 <parse_midi_event+0xae>
 8001402:	2200      	movs	r2, #0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	429a      	cmp	r2, r3
 8001408:	dced      	bgt.n	80013e6 <parse_midi_event+0x90>
		}
		return address;
 800140a:	69fb      	ldr	r3, [r7, #28]
	}
	return 0;
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <init_songs>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

void init_songs(){
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e007      	b.n	8001430 <init_songs+0x1c>
		get_song_info(i);
 8001420:	463b      	mov	r3, r7
 8001422:	69f9      	ldr	r1, [r7, #28]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd6f 	bl	8000f08 <get_song_info>
	for(int i = 0; i < 5; i++){
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b04      	cmp	r3, #4
 8001434:	ddf4      	ble.n	8001420 <init_songs+0xc>
	}
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <get_song>:

song get_song (uint8_t song_number){
 8001440:	b490      	push	{r4, r7}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <get_song+0x2c>)
 8001452:	460c      	mov	r4, r1
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	e893 0003 	ldmia.w	r3, {r0, r1}
 800145c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20006efc 	.word	0x20006efc

08001470 <get_note_hz>:
/* Octave  7 */         2093.00, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520.00, 3729.31, 3951.07,
/* Octave  8 */         4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040.00, 7458.62, 7902.13,
/* Octave  9 */         8372.02, 8869.84, 9397.26, 9956.06,10548.08,11175.30,11839.82,12543.86};


float get_note_hz(int note_number){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	return notes[note_number];
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <get_note_hz+0x24>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	ee07 3a90 	vmov	s15, r3
}
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20006f24 	.word	0x20006f24

08001498 <hertz_to_duration>:

// Convert from hertz to ticks
float hertz_to_duration (float hertz) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t tick_speed = TICK_SPEED; // This is a hack, you'll fix it later
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <hertz_to_duration+0x5c>)
 80014a4:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d102      	bne.n	80014ba <hertz_to_duration+0x22>
		return 0;
 80014b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80014f8 <hertz_to_duration+0x60>
 80014b8:	e014      	b.n	80014e4 <hertz_to_duration+0x4c>
	float duration = 1 / hertz;
 80014ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014be:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c6:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * tick_speed);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	000186a0 	.word	0x000186a0
 80014f8:	00000000 	.word	0x00000000

080014fc <get_velocity_mult>:

/*
 * Returns a standardized (0-1) equation for a waveform (type)
 * when given a counter and frequency
 */
float get_velocity_mult(char type, uint32_t x, int f, float a){
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	ed87 0a00 	vstr	s0, [r7]
 800150c:	73fb      	strb	r3, [r7, #15]
	float c = (x % f);
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	fbb3 f1f2 	udiv	r1, r3, r2
 8001516:	fb01 f202 	mul.w	r2, r1, r2
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001524:	edc7 7a05 	vstr	s15, [r7, #20]

	if(type == 's') //Square Wave
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b73      	cmp	r3, #115	; 0x73
 800152c:	d113      	bne.n	8001556 <get_velocity_mult+0x5a>
		return 2 * c < f;
 800152e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001532:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d502      	bpl.n	8001550 <get_velocity_mult+0x54>
 800154a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800154e:	e057      	b.n	8001600 <get_velocity_mult+0x104>
 8001550:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8001610 <get_velocity_mult+0x114>
 8001554:	e054      	b.n	8001600 <get_velocity_mult+0x104>

	else if(type == 'p') //Pulse Wave
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b70      	cmp	r3, #112	; 0x70
 800155a:	d115      	bne.n	8001588 <get_velocity_mult+0x8c>
		return c / a < f;
 800155c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001560:	edd7 7a00 	vldr	s15, [r7]
 8001564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d502      	bpl.n	8001582 <get_velocity_mult+0x86>
 800157c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001580:	e03e      	b.n	8001600 <get_velocity_mult+0x104>
 8001582:	eddf 7a23 	vldr	s15, [pc, #140]	; 8001610 <get_velocity_mult+0x114>
 8001586:	e03b      	b.n	8001600 <get_velocity_mult+0x104>

	else if(type == 'w') //Saw Wave
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b77      	cmp	r3, #119	; 0x77
 800158c:	d109      	bne.n	80015a2 <get_velocity_mult+0xa6>
		return c / f;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001598:	edd7 6a05 	vldr	s13, [r7, #20]
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	e02e      	b.n	8001600 <get_velocity_mult+0x104>

	else if(type == 't') //Triangle Wave
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b74      	cmp	r3, #116	; 0x74
 80015a6:	d129      	bne.n	80015fc <get_velocity_mult+0x100>
		return (2 * c < f? (2 * c)/f : 2 - (2 * c)/f);
 80015a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d50b      	bpl.n	80015dc <get_velocity_mult+0xe0>
 80015c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015da:	e011      	b.n	8001600 <get_velocity_mult+0x104>
 80015dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	e001      	b.n	8001600 <get_velocity_mult+0x104>

	return 0;
 80015fc:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001610 <get_velocity_mult+0x114>
}
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000

08001614 <play_tone_no_int>:

/*
 * Plays a tone once
 * (NO INTERRUPTION)
 */
void play_tone_no_int(TONE tone, char wave){
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	1d3c      	adds	r4, r7, #4
 800161c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001620:	70fb      	strb	r3, [r7, #3]
	uint32_t* count = tick();
 8001622:	f000 fc03 	bl	8001e2c <tick>
 8001626:	6178      	str	r0, [r7, #20]

	float mult = get_velocity_mult(wave, *count, tone.freq, .25);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff61 	bl	80014fc <get_velocity_mult>
 800163a:	ed87 0a04 	vstr	s0, [r7, #16]

	DAC_Set_Value(mult * 10 * tone.velocity);
 800163e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001642:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800165c:	ee17 0a90 	vmov	r0, s15
 8001660:	f7ff fb20 	bl	8000ca4 <DAC_Set_Value>
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <play_track_no_int>:

/*
 * Plays the next sound in a track
 * (NO INTERRUPTION)
 */
int play_track_no_int(int track_index, int* from_begining, char wave){
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
	static int i = 1;
	static uint32_t start = 0;

	if(!*from_begining){
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <play_track_no_int+0x28>
		i = 1;
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <play_track_no_int+0xe4>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
		start = 0;
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <play_track_no_int+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
		*from_begining = 1;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
	}

	if(start == 0)
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <play_track_no_int+0xe8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <play_track_no_int+0x3c>
		start = *tick();
 800169c:	f000 fbc6 	bl	8001e2c <tick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <play_track_no_int+0xe8>)
 80016a6:	6013      	str	r3, [r2, #0]

	uint32_t* count = tick();
 80016a8:	f000 fbc0 	bl	8001e2c <tick>
 80016ac:	61f8      	str	r0, [r7, #28]
	TONE* tone = get_track(track_index);
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fc16 	bl	8000ee0 <get_track>
 80016b4:	61b8      	str	r0, [r7, #24]

	if(tone[i].note != end_tone.note){
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <play_track_no_int+0xe4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	461a      	mov	r2, r3
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d035      	beq.n	800173e <play_track_no_int+0xd2>
		float duration = tone[i].duration;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <play_track_no_int+0xe4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	617b      	str	r3, [r7, #20]

		if( (*count - start) <= (duration) )
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <play_track_no_int+0xe8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	db0f      	blt.n	800172a <play_track_no_int+0xbe>
			play_tone_no_int(tone[i-1], wave);
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <play_track_no_int+0xe4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3b0c      	subs	r3, #12
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	441a      	add	r2, r3
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	ca07      	ldmia	r2, {r0, r1, r2}
 8001722:	f7ff ff77 	bl	8001614 <play_tone_no_int>
	} else {
		i = 1;
		return 1; // Song has ended
	}

	return 2; // Do nothing
 8001726:	2302      	movs	r3, #2
 8001728:	e00d      	b.n	8001746 <play_track_no_int+0xda>
			i++;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <play_track_no_int+0xe4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <play_track_no_int+0xe4>)
 8001732:	6013      	str	r3, [r2, #0]
			start = 0;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <play_track_no_int+0xe8>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
			return 0; // Note has ended
 800173a:	2300      	movs	r3, #0
 800173c:	e003      	b.n	8001746 <play_track_no_int+0xda>
		i = 1;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <play_track_no_int+0xe4>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
		return 1; // Song has ended
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20007124 	.word	0x20007124
 8001754:	2000a150 	.word	0x2000a150

08001758 <play>:
int is_playing = 0;
int state = 0;
int has_started = 0;
char wave = 's';

void play(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	is_playing = 1;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <play+0x14>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
	LED_On(PROJECT_LED);
 8001762:	2007      	movs	r0, #7
 8001764:	f7fe fefe 	bl	8000564 <LED_On>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000a16c 	.word	0x2000a16c

08001770 <stop>:

void stop(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	is_playing = 0;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <stop+0x20>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	has_started = 0;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <stop+0x24>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
	state = 2;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <stop+0x28>)
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
	LED_Off(PROJECT_LED);
 8001786:	2007      	movs	r0, #7
 8001788:	f7fe ff02 	bl	8000590 <LED_Off>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000a16c 	.word	0x2000a16c
 8001794:	2000a174 	.word	0x2000a174
 8001798:	2000a170 	.word	0x2000a170

0800179c <run_song>:

//Stars the Non Interrupt Tone Player
void run_song(){
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if(state == 1){
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <run_song+0x3c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <run_song+0x10>
		stop();
 80017a8:	f7ff ffe2 	bl	8001770 <stop>
	}
	if(is_playing && song_counter < 2){
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <run_song+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00e      	beq.n	80017d2 <run_song+0x36>
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <run_song+0x44>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	dc0a      	bgt.n	80017d2 <run_song+0x36>
		state = play_track_no_int(song_counter, &has_started, wave);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <run_song+0x44>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <run_song+0x48>)
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	4908      	ldr	r1, [pc, #32]	; (80017e8 <run_song+0x4c>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff50 	bl	800166c <play_track_no_int>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <run_song+0x3c>)
 80017d0:	6013      	str	r3, [r2, #0]
	}

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000a170 	.word	0x2000a170
 80017dc:	2000a16c 	.word	0x2000a16c
 80017e0:	20007128 	.word	0x20007128
 80017e4:	20007130 	.word	0x20007130
 80017e8:	2000a174 	.word	0x2000a174

080017ec <run_command>:

void run_command(char command[], uint8_t* state){
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	61f8      	str	r0, [r7, #28]
 80017f4:	61b9      	str	r1, [r7, #24]
	if(strcmp(command, "PLAY") == 0){
 80017f6:	4984      	ldr	r1, [pc, #528]	; (8001a08 <run_command+0x21c>)
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7fe fce9 	bl	80001d0 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <run_command+0x3c>
		if(song_counter == -1){
 8001804:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <run_command+0x220>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d103      	bne.n	8001816 <run_command+0x2a>
			printlf("! No Song Selected !");
 800180e:	4880      	ldr	r0, [pc, #512]	; (8001a10 <run_command+0x224>)
 8001810:	f000 f9e6 	bl	8001be0 <printlf>
 8001814:	e0f1      	b.n	80019fa <run_command+0x20e>
		} else {
			printlf(". . . playing");
 8001816:	487f      	ldr	r0, [pc, #508]	; (8001a14 <run_command+0x228>)
 8001818:	f000 f9e2 	bl	8001be0 <printlf>
			play();
 800181c:	f7ff ff9c 	bl	8001758 <play>
			*state = 2;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e0e8      	b.n	80019fa <run_command+0x20e>
		}
	}
	else if(strcmp(command, "TOGGLE") == 0){ //Toggle pause and play commands
 8001828:	497b      	ldr	r1, [pc, #492]	; (8001a18 <run_command+0x22c>)
 800182a:	69f8      	ldr	r0, [r7, #28]
 800182c:	f7fe fcd0 	bl	80001d0 <strcmp>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <run_command+0x66>
		if(*state == 2){
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d104      	bne.n	8001848 <run_command+0x5c>
			run_command("PAUSE", state);
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	4876      	ldr	r0, [pc, #472]	; (8001a1c <run_command+0x230>)
 8001842:	f7ff ffd3 	bl	80017ec <run_command>
 8001846:	e0d8      	b.n	80019fa <run_command+0x20e>
		} else {
			run_command("PLAY", state);
 8001848:	69b9      	ldr	r1, [r7, #24]
 800184a:	486f      	ldr	r0, [pc, #444]	; (8001a08 <run_command+0x21c>)
 800184c:	f7ff ffce 	bl	80017ec <run_command>
 8001850:	e0d3      	b.n	80019fa <run_command+0x20e>
		}
	}
	else if(strcmp(command, "STOP") == 0){
 8001852:	4973      	ldr	r1, [pc, #460]	; (8001a20 <run_command+0x234>)
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f7fe fcbb 	bl	80001d0 <strcmp>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <run_command+0x86>
		printlf(". . . stopped");
 8001860:	4870      	ldr	r0, [pc, #448]	; (8001a24 <run_command+0x238>)
 8001862:	f000 f9bd 	bl	8001be0 <printlf>
		stop();
 8001866:	f7ff ff83 	bl	8001770 <stop>
		*state = 0;
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e0c3      	b.n	80019fa <run_command+0x20e>
	}
	else if(strcmp(command, "PAUSE") == 0){
 8001872:	496a      	ldr	r1, [pc, #424]	; (8001a1c <run_command+0x230>)
 8001874:	69f8      	ldr	r0, [r7, #28]
 8001876:	f7fe fcab 	bl	80001d0 <strcmp>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d111      	bne.n	80018a4 <run_command+0xb8>
		is_playing = 0;
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <run_command+0x23c>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
		if(*state != 1){
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d006      	beq.n	800189c <run_command+0xb0>
			printlf(". . . pausing");
 800188e:	4867      	ldr	r0, [pc, #412]	; (8001a2c <run_command+0x240>)
 8001890:	f000 f9a6 	bl	8001be0 <printlf>
			*state = 1;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e0ae      	b.n	80019fa <run_command+0x20e>
		}
		else {
			printlf(". . ! Already Paused !");
 800189c:	4864      	ldr	r0, [pc, #400]	; (8001a30 <run_command+0x244>)
 800189e:	f000 f99f 	bl	8001be0 <printlf>
 80018a2:	e0aa      	b.n	80019fa <run_command+0x20e>
		}
	}
	else if(strcmp(command, "NEXT") == 0){
 80018a4:	4963      	ldr	r1, [pc, #396]	; (8001a34 <run_command+0x248>)
 80018a6:	69f8      	ldr	r0, [r7, #28]
 80018a8:	f7fe fc92 	bl	80001d0 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d13a      	bne.n	8001928 <run_command+0x13c>
		song_counter++;
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <run_command+0x220>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <run_command+0x220>)
 80018ba:	6013      	str	r3, [r2, #0]
		if(song_counter >= song_total){
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <run_command+0x220>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <run_command+0x24c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	db02      	blt.n	80018ce <run_command+0xe2>
			song_counter = 0;
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <run_command+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
		}

		has_started = 0;
 80018ce:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <run_command+0x250>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
		info = get_song_info(song_counter);
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <run_command+0x220>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4c59      	ldr	r4, [pc, #356]	; (8001a40 <run_command+0x254>)
 80018da:	463b      	mov	r3, r7
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb12 	bl	8000f08 <get_song_info>
 80018e4:	4625      	mov	r5, r4
 80018e6:	463c      	mov	r4, r7
 80018e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018f0:	e885 0003 	stmia.w	r5, {r0, r1}
		printlf(". . .  next song\n\r\n\rSONG NUMBER %d:\n\r-------------------------", song_counter+1);
 80018f4:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <run_command+0x220>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	4851      	ldr	r0, [pc, #324]	; (8001a44 <run_command+0x258>)
 80018fe:	f000 f96f 	bl	8001be0 <printlf>
		//printlf("MIDWAY");
		printlf("Song Title: %s", info.title);
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <run_command+0x254>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	484f      	ldr	r0, [pc, #316]	; (8001a48 <run_command+0x25c>)
 800190a:	f000 f969 	bl	8001be0 <printlf>
		printlf("Copyright: %s", info.copyright);
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <run_command+0x254>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4619      	mov	r1, r3
 8001914:	484d      	ldr	r0, [pc, #308]	; (8001a4c <run_command+0x260>)
 8001916:	f000 f963 	bl	8001be0 <printlf>
		printlf("Tempo: %d", info.tempo);
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <run_command+0x254>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4619      	mov	r1, r3
 8001920:	484b      	ldr	r0, [pc, #300]	; (8001a50 <run_command+0x264>)
 8001922:	f000 f95d 	bl	8001be0 <printlf>
 8001926:	e068      	b.n	80019fa <run_command+0x20e>



		//printlf("FINISHED");
	}
	else if(strcmp(command, "HELP") == 0){
 8001928:	494a      	ldr	r1, [pc, #296]	; (8001a54 <run_command+0x268>)
 800192a:	69f8      	ldr	r0, [r7, #28]
 800192c:	f7fe fc50 	bl	80001d0 <strcmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d121      	bne.n	800197a <run_command+0x18e>
		printlf("\n\rAvailable User Commands\n\r-------------------------");
 8001936:	4848      	ldr	r0, [pc, #288]	; (8001a58 <run_command+0x26c>)
 8001938:	f000 f952 	bl	8001be0 <printlf>
		printlf("HELP - Show list of commands");
 800193c:	4847      	ldr	r0, [pc, #284]	; (8001a5c <run_command+0x270>)
 800193e:	f000 f94f 	bl	8001be0 <printlf>
		printlf("NEXT - Show next song info");
 8001942:	4847      	ldr	r0, [pc, #284]	; (8001a60 <run_command+0x274>)
 8001944:	f000 f94c 	bl	8001be0 <printlf>
		printlf("PLAY - Play the song (LED on)");
 8001948:	4846      	ldr	r0, [pc, #280]	; (8001a64 <run_command+0x278>)
 800194a:	f000 f949 	bl	8001be0 <printlf>
		printlf("PAUSE - Pause the song (LED flash)");
 800194e:	4846      	ldr	r0, [pc, #280]	; (8001a68 <run_command+0x27c>)
 8001950:	f000 f946 	bl	8001be0 <printlf>
		printlf("STOP - Stop the song (LED off)");
 8001954:	4845      	ldr	r0, [pc, #276]	; (8001a6c <run_command+0x280>)
 8001956:	f000 f943 	bl	8001be0 <printlf>
		printlf("WAVE - Changes the wave form");
 800195a:	4845      	ldr	r0, [pc, #276]	; (8001a70 <run_command+0x284>)
 800195c:	f000 f940 	bl	8001be0 <printlf>
		printlf("\t[s] - Square Wave");
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <run_command+0x288>)
 8001962:	f000 f93d 	bl	8001be0 <printlf>
		printlf("\t[t] - Triangle Wave");
 8001966:	4844      	ldr	r0, [pc, #272]	; (8001a78 <run_command+0x28c>)
 8001968:	f000 f93a 	bl	8001be0 <printlf>
		printlf("\t[w] - Saw Wave");
 800196c:	4843      	ldr	r0, [pc, #268]	; (8001a7c <run_command+0x290>)
 800196e:	f000 f937 	bl	8001be0 <printlf>
		printlf("\t[p] - Pulse Wave");
 8001972:	4843      	ldr	r0, [pc, #268]	; (8001a80 <run_command+0x294>)
 8001974:	f000 f934 	bl	8001be0 <printlf>
 8001978:	e03f      	b.n	80019fa <run_command+0x20e>
	}
	else if(strcmp(command, "WAVE") == 32){
 800197a:	4942      	ldr	r1, [pc, #264]	; (8001a84 <run_command+0x298>)
 800197c:	69f8      	ldr	r0, [r7, #28]
 800197e:	f7fe fc27 	bl	80001d0 <strcmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b20      	cmp	r3, #32
 8001986:	d135      	bne.n	80019f4 <run_command+0x208>
		char c = command[5];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	795b      	ldrb	r3, [r3, #5]
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(c == 's' || c == 't' || c == 'w' || c == 'p'){
 8001990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001994:	2b73      	cmp	r3, #115	; 0x73
 8001996:	d00b      	beq.n	80019b0 <run_command+0x1c4>
 8001998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199c:	2b74      	cmp	r3, #116	; 0x74
 800199e:	d007      	beq.n	80019b0 <run_command+0x1c4>
 80019a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a4:	2b77      	cmp	r3, #119	; 0x77
 80019a6:	d003      	beq.n	80019b0 <run_command+0x1c4>
 80019a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ac:	2b70      	cmp	r3, #112	; 0x70
 80019ae:	d11d      	bne.n	80019ec <run_command+0x200>
			char* wav = c == 's'?"-_":c == 't'?"/\\":c == 'w'?"/":"-__";
 80019b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b4:	2b73      	cmp	r3, #115	; 0x73
 80019b6:	d00d      	beq.n	80019d4 <run_command+0x1e8>
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019bc:	2b74      	cmp	r3, #116	; 0x74
 80019be:	d007      	beq.n	80019d0 <run_command+0x1e4>
 80019c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c4:	2b77      	cmp	r3, #119	; 0x77
 80019c6:	d101      	bne.n	80019cc <run_command+0x1e0>
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <run_command+0x29c>)
 80019ca:	e004      	b.n	80019d6 <run_command+0x1ea>
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <run_command+0x2a0>)
 80019ce:	e002      	b.n	80019d6 <run_command+0x1ea>
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <run_command+0x2a4>)
 80019d2:	e000      	b.n	80019d6 <run_command+0x1ea>
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <run_command+0x2a8>)
 80019d6:	623b      	str	r3, [r7, #32]
			printlf("%s changed wave form %s", wav, wav);
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	6a39      	ldr	r1, [r7, #32]
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <run_command+0x2ac>)
 80019de:	f000 f8ff 	bl	8001be0 <printlf>
			wave = c;
 80019e2:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <run_command+0x2b0>)
 80019e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e8:	7013      	strb	r3, [r2, #0]
		if(c == 's' || c == 't' || c == 'w' || c == 'p'){
 80019ea:	e006      	b.n	80019fa <run_command+0x20e>
		}
		else
			printlf("!Invalid Wave Form!");
 80019ec:	482c      	ldr	r0, [pc, #176]	; (8001aa0 <run_command+0x2b4>)
 80019ee:	f000 f8f7 	bl	8001be0 <printlf>
 80019f2:	e002      	b.n	80019fa <run_command+0x20e>
	}
	else {
		printlf("!Invalid Command!");
 80019f4:	482b      	ldr	r0, [pc, #172]	; (8001aa4 <run_command+0x2b8>)
 80019f6:	f000 f8f3 	bl	8001be0 <printlf>
	}
	printlf("");
 80019fa:	482b      	ldr	r0, [pc, #172]	; (8001aa8 <run_command+0x2bc>)
 80019fc:	f000 f8f0 	bl	8001be0 <printlf>
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	08003238 	.word	0x08003238
 8001a0c:	20007128 	.word	0x20007128
 8001a10:	08003240 	.word	0x08003240
 8001a14:	08003258 	.word	0x08003258
 8001a18:	08003268 	.word	0x08003268
 8001a1c:	08003270 	.word	0x08003270
 8001a20:	08003278 	.word	0x08003278
 8001a24:	08003280 	.word	0x08003280
 8001a28:	2000a16c 	.word	0x2000a16c
 8001a2c:	08003290 	.word	0x08003290
 8001a30:	080032a0 	.word	0x080032a0
 8001a34:	080032b8 	.word	0x080032b8
 8001a38:	2000712c 	.word	0x2000712c
 8001a3c:	2000a174 	.word	0x2000a174
 8001a40:	2000a154 	.word	0x2000a154
 8001a44:	080032c0 	.word	0x080032c0
 8001a48:	08003300 	.word	0x08003300
 8001a4c:	08003310 	.word	0x08003310
 8001a50:	08003320 	.word	0x08003320
 8001a54:	0800332c 	.word	0x0800332c
 8001a58:	08003334 	.word	0x08003334
 8001a5c:	0800336c 	.word	0x0800336c
 8001a60:	0800338c 	.word	0x0800338c
 8001a64:	080033a8 	.word	0x080033a8
 8001a68:	080033c8 	.word	0x080033c8
 8001a6c:	080033ec 	.word	0x080033ec
 8001a70:	0800340c 	.word	0x0800340c
 8001a74:	0800342c 	.word	0x0800342c
 8001a78:	08003440 	.word	0x08003440
 8001a7c:	08003458 	.word	0x08003458
 8001a80:	08003468 	.word	0x08003468
 8001a84:	0800347c 	.word	0x0800347c
 8001a88:	08003484 	.word	0x08003484
 8001a8c:	08003488 	.word	0x08003488
 8001a90:	0800348c 	.word	0x0800348c
 8001a94:	08003490 	.word	0x08003490
 8001a98:	08003494 	.word	0x08003494
 8001a9c:	20007130 	.word	0x20007130
 8001aa0:	080034ac 	.word	0x080034ac
 8001aa4:	080034c0 	.word	0x080034c0
 8001aa8:	080034d4 	.word	0x080034d4

08001aac <convert_to_uint16>:
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>


uint16_t convert_to_uint16 (uint8_t* ptr) {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    uint16_t num = (ptr[0] << 8) + ptr [1];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	81fb      	strh	r3, [r7, #14]
    return num;
 8001aca:	89fb      	ldrh	r3, [r7, #14]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <convert_to_uint32>:

uint32_t convert_to_uint32 (uint8_t* ptr) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    uint32_t num = (ptr[0] << 24) + (ptr [1] << 16) + (ptr[2] << 8) + ptr[3];
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	061a      	lsls	r2, r3, #24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3302      	adds	r3, #2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	4413      	add	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	3203      	adds	r2, #3
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
    return num;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <convert_to_uint24>:

unsigned int convert_to_uint24 (uint8_t* ptr) {
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
    unsigned int num = (unsigned int)malloc(sizeof(uint8_t) * 3);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f000 feae 	bl	800287c <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
	num = (ptr [0] << 16) + (ptr[1] << 8) + ptr [2];
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4413      	add	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	3202      	adds	r2, #2
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    return num;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <convert_header>:

Header* convert_header (Header* h) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	h->division = convert_to_uint16((uint8_t*)&h->division);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	330c      	adds	r3, #12
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ffa9 	bl	8001aac <convert_to_uint16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	819a      	strh	r2, [r3, #12]
	h->format = convert_to_uint16((uint8_t*)&h->format);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3308      	adds	r3, #8
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffa0 	bl	8001aac <convert_to_uint16>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	811a      	strh	r2, [r3, #8]
	h->tracks = convert_to_uint16((uint8_t*)&h->tracks);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	330a      	adds	r3, #10
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff97 	bl	8001aac <convert_to_uint16>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	815a      	strh	r2, [r3, #10]
	h->len = convert_to_uint32((uint8_t*)&h->len);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffa4 	bl	8001ad8 <convert_to_uint32>
 8001b90:	4602      	mov	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	605a      	str	r2, [r3, #4]

	return h;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <printf>:
    int n = sprintf ((char*) buffer, "%s\n", string);
    USART_Write (USART2, buffer, n);
    return n;
}

int printf (const char* format, ...) {
 8001ba0:	b40f      	push	{r0, r1, r2, r3}
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0

	va_list aptr;
	int n;

	va_start(aptr, format);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	603b      	str	r3, [r7, #0]
	n = vsprintf((char*)buffer, format, aptr);
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	6939      	ldr	r1, [r7, #16]
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <printf+0x38>)
 8001bb4:	f000 ff8e 	bl	8002ad4 <vsiprintf>
 8001bb8:	6078      	str	r0, [r7, #4]
	va_end(aptr);

	USART_Write (USART2, buffer, n);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4906      	ldr	r1, [pc, #24]	; (8001bd8 <printf+0x38>)
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <printf+0x3c>)
 8001bc2:	f7fe ff09 	bl	80009d8 <USART_Write>

	return n;
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bd2:	b004      	add	sp, #16
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000a178 	.word	0x2000a178
 8001bdc:	40004400 	.word	0x40004400

08001be0 <printlf>:

void printlf(const char* format, ...) {
 8001be0:	b40f      	push	{r0, r1, r2, r3}
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
	printf(format);
 8001be6:	68b8      	ldr	r0, [r7, #8]
 8001be8:	f7ff ffda 	bl	8001ba0 <printf>
	printf("\n\r");
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <printlf+0x20>)
 8001bee:	f7ff ffd7 	bl	8001ba0 <printf>
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bfa:	b004      	add	sp, #16
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	080034dc 	.word	0x080034dc

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f000 fdf8 	bl	8002828 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20018000 	.word	0x20018000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	2000a1c8 	.word	0x2000a1c8
 8001c6c:	2000a200 	.word	0x2000a200

08001c70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <SystemInit+0x64>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <SystemInit+0x64>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <SystemInit+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <SystemInit+0x68>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <SystemInit+0x68>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <SystemInit+0x68>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <SystemInit+0x68>)
 8001c9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ca0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <SystemInit+0x68>)
 8001ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <SystemInit+0x68>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <SystemInit+0x68>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <SystemInit+0x68>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SystemInit+0x64>)
 8001cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <init_systick>:
static uint8_t counters_on[3];
static float counters_max[3];
uint32_t clock = 0;

void init_systick()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SYST->CSR &= ~1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <init_systick+0x74>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <init_systick+0x74>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.

	//SYST->RVR = 10000;
	SYST->RVR = 800;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <init_systick+0x74>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cf8:	605a      	str	r2, [r3, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SYST->CSR |= 0x01 << 0x02;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <init_systick+0x74>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <init_systick+0x74>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	601a      	str	r2, [r3, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SYST->CSR |= 0x01;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <init_systick+0x74>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <init_systick+0x74>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

	// Set the interrupt bit;
	SYST->CSR |= 0x01 << 0x01;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <init_systick+0x74>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <init_systick+0x74>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0202 	orr.w	r2, r2, #2
 8001d28:	601a      	str	r2, [r3, #0]

	counter_init(0, reset_value, 1); //init one second counter
 8001d2a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001d54 <init_systick+0x78>
 8001d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d32:	2101      	movs	r1, #1
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 f917 	bl	8001f6c <counter_init>
	counter_init(1, 0, 0); //init button down counter
 8001d3e:	2100      	movs	r1, #0
 8001d40:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001d58 <init_systick+0x7c>
 8001d44:	2001      	movs	r0, #1
 8001d46:	f000 f911 	bl	8001f6c <counter_init>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20007134 	.word	0x20007134
 8001d54:	0000000a 	.word	0x0000000a
 8001d58:	00000000 	.word	0x00000000

08001d5c <SysTick_Handler>:
uint8_t get_flag()
{
	return (SYST->CSR & (1 << 16)) >> 16;
}

void SysTick_Handler() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	for(int i = 0; i < size; i++){
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	e044      	b.n	8001df2 <SysTick_Handler+0x96>
		if(counters_on[i]) //Increment all playing counters
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <SysTick_Handler+0xb4>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <SysTick_Handler+0x2a>
			counters[i]++;
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <SysTick_Handler+0xb8>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	4925      	ldr	r1, [pc, #148]	; (8001e14 <SysTick_Handler+0xb8>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//count >= 80000 * 1000 / SYST->RVR = 1 second

		// 1 second = 1000 milli seconds
		// 8000000 (8mil) = 100 millisecond timer = .1 second timer
		// 80000 (80th) = 1 millisecond timer = .001 second timer
		if(counters_max[i] != 0 && counters[i] >= (float)(8000 * counters_max[i] / SYST->RVR)){
 8001d86:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <SysTick_Handler+0xbc>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d027      	beq.n	8001dec <SysTick_Handler+0x90>
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <SysTick_Handler+0xb8>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <SysTick_Handler+0xbc>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001e1c <SysTick_Handler+0xc0>
 8001dbc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <SysTick_Handler+0xc4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dce:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	db07      	blt.n	8001dec <SysTick_Handler+0x90>
			counters_on[i] = 2;
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <SysTick_Handler+0xb4>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	2202      	movs	r2, #2
 8001de4:	701a      	strb	r2, [r3, #0]
			counter_reset(i);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f864 	bl	8001eb4 <counter_reset>
	for(int i = 0; i < size; i++){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <SysTick_Handler+0xc8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	dbb4      	blt.n	8001d68 <SysTick_Handler+0xc>
		}
	}
	clock++;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <SysTick_Handler+0xcc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <SysTick_Handler+0xcc>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000a1d8 	.word	0x2000a1d8
 8001e14:	2000a1cc 	.word	0x2000a1cc
 8001e18:	2000a1dc 	.word	0x2000a1dc
 8001e1c:	45fa0000 	.word	0x45fa0000
 8001e20:	20007134 	.word	0x20007134
 8001e24:	20007138 	.word	0x20007138
 8001e28:	2000a1e8 	.word	0x2000a1e8

08001e2c <tick>:

uint32_t* tick() {
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	return &clock;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <tick+0x10>)
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	2000a1e8 	.word	0x2000a1e8

08001e40 <get_second_elapsed>:

uint8_t get_second_elapsed() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	return counting_ended(0);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f000 f87b 	bl	8001f40 <counting_ended>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b2db      	uxtb	r3, r3
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <reset_second_elapsed>:

void reset_second_elapsed() {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	af00      	add	r7, sp, #0
	counting_start(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f84e 	bl	8001ef8 <counting_start>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <get_duration>:

//get system clock elapsed time
uint32_t  get_duration() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	return counter_get(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 f815 	bl	8001e94 <counter_get>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <reset_duration>:

//reset elapsed time
void reset_duration() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	counter_reset(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 f81d 	bl	8001eb4 <counter_reset>
	counting_stop(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 f84e 	bl	8001f1c <counting_stop>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <start_duration>:

//start system clock
void start_duration() {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	counting_start(1);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f000 f835 	bl	8001ef8 <counting_start>
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <counter_get>:

uint32_t counter_get(int id){
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	return counters[id];
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <counter_get+0x1c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	2000a1cc 	.word	0x2000a1cc

08001eb4 <counter_reset>:

void counter_reset(int id){
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	counters[id] = 0;
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <counter_reset+0x20>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000a1cc 	.word	0x2000a1cc

08001ed8 <counting_get>:

//get if counter is counting
uint8_t counting_get(int id){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	return counters_on[id];
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <counting_get+0x1c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	2000a1d8 	.word	0x2000a1d8

08001ef8 <counting_start>:

//start counter counting
void counting_start(int id){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	counters_on[id] = 1;
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <counting_start+0x20>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000a1d8 	.word	0x2000a1d8

08001f1c <counting_stop>:

//stop counter counting
void counting_stop(uint8_t id){
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	counters_on[id] = 0;
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <counting_stop+0x20>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	54d1      	strb	r1, [r2, r3]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000a1d8 	.word	0x2000a1d8

08001f40 <counting_ended>:

//get if counter has hit max time duration
int counting_ended(uint8_t id){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	return counters_on[id] == 2;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <counting_ended+0x28>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	2000a1d8 	.word	0x2000a1d8

08001f6c <counter_init>:

//create new counter
void counter_init(uint8_t id, float max, uint8_t start_immediately){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	ed87 0a00 	vstr	s0, [r7]
 8001f78:	460a      	mov	r2, r1
 8001f7a:	71fb      	strb	r3, [r7, #7]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	71bb      	strb	r3, [r7, #6]
	mili_counter_init(id, max*1000, start_immediately);
 8001f80:	edd7 7a00 	vldr	s15, [r7]
 8001f84:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fa4 <counter_init+0x38>
 8001f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8c:	79ba      	ldrb	r2, [r7, #6]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4611      	mov	r1, r2
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f806 	bl	8001fa8 <mili_counter_init>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	447a0000 	.word	0x447a0000

08001fa8 <mili_counter_init>:

void mili_counter_init(uint8_t id, float max, uint8_t start_immediately){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	ed87 0a00 	vstr	s0, [r7]
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	71fb      	strb	r3, [r7, #7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71bb      	strb	r3, [r7, #6]
	counters[id] = 0;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <mili_counter_init+0x40>)
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	counters_max[id] = max;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <mili_counter_init+0x44>)
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	601a      	str	r2, [r3, #0]
	counters_on[id] = start_immediately;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <mili_counter_init+0x48>)
 8001fd6:	79ba      	ldrb	r2, [r7, #6]
 8001fd8:	54ca      	strb	r2, [r1, r3]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000a1cc 	.word	0x2000a1cc
 8001fec:	2000a1dc 	.word	0x2000a1dc
 8001ff0:	2000a1d8 	.word	0x2000a1d8

08001ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800202c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff8:	f7ff fe3a 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <LoopForever+0xe>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	; (8002040 <LoopForever+0x16>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002022:	f000 fc07 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002026:	f7fe fe4d 	bl	8000cc4 <main>

0800202a <LoopForever>:

LoopForever:
    b LoopForever
 800202a:	e7fe      	b.n	800202a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800202c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	200071a0 	.word	0x200071a0
  ldr r2, =_sidata
 8002038:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 800203c:	200071a0 	.word	0x200071a0
  ldr r4, =_ebss
 8002040:	2000a200 	.word	0x2000a200

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000a1ec 	.word	0x2000a1ec

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_Delay+0x44>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffde 	bl	8002048 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20007139 	.word	0x20007139

080020a8 <__NVIC_EnableIRQ>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ffd8 	bl	80020a8 <__NVIC_EnableIRQ>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e014      	b.n	800213c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd44 	bl	8000bb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	795b      	ldrb	r3, [r3, #5]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_DAC_Start+0x16>
 8002156:	2302      	movs	r3, #2
 8002158:	e03b      	b.n	80021d2 <HAL_DAC_Start+0x8e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800218e:	2b04      	cmp	r3, #4
 8002190:	d118      	bne.n	80021c4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e00f      	b.n	80021c4 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021b2:	d107      	bne.n	80021c4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0202 	orr.w	r2, r2, #2
 80021c2:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80021de:	b480      	push	{r7}
 80021e0:	b087      	sub	sp, #28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3308      	adds	r3, #8
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e004      	b.n	8002212 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	3314      	adds	r3, #20
 8002210:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	461a      	mov	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	795b      	ldrb	r3, [r3, #5]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_DAC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e107      	b.n	8002454 <HAL_DAC_ConfigChannel+0x22c>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2202      	movs	r2, #2
 800224e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d174      	bne.n	8002342 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002258:	f7ff fef6 	bl	8002048 <HAL_GetTick>
 800225c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d134      	bne.n	80022ce <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002264:	e011      	b.n	800228a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002266:	f7ff feef 	bl	8002048 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d90a      	bls.n	800228a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f043 0208 	orr.w	r2, r3, #8
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2203      	movs	r2, #3
 8002284:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0e4      	b.n	8002454 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e6      	bne.n	8002266 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff fee1 	bl	8002060 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	6992      	ldr	r2, [r2, #24]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
 80022a8:	e01e      	b.n	80022e8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022aa:	f7ff fecd 	bl	8002048 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d90a      	bls.n	80022ce <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f043 0208 	orr.w	r2, r3, #8
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2203      	movs	r2, #3
 80022c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0c2      	b.n	8002454 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	dbe8      	blt.n	80022aa <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80022d8:	2001      	movs	r0, #1
 80022da:	f7ff fec1 	bl	8002060 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	6992      	ldr	r2, [r2, #24]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	ea02 0103 	and.w	r1, r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	21ff      	movs	r1, #255	; 0xff
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	ea02 0103 	and.w	r1, r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d11d      	bne.n	8002386 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2207      	movs	r2, #7
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	22c0      	movs	r2, #192	; 0xc0
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43da      	mvns	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	400a      	ands	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e17f      	b.n	800276c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8171 	beq.w	8002766 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d005      	beq.n	800249c <HAL_GPIO_Init+0x40>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0201 	and.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b03      	cmp	r3, #3
 8002508:	d118      	bne.n	800253c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f003 0201 	and.w	r2, r3, #1
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d017      	beq.n	8002578 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	6939      	ldr	r1, [r7, #16]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80ac 	beq.w	8002766 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_GPIO_Init+0x330>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <HAL_GPIO_Init+0x330>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6613      	str	r3, [r2, #96]	; 0x60
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_GPIO_Init+0x330>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002626:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x242>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x338>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x23e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x33c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x23a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x340>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x236>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x344>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x232>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_GPIO_Init+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_GPIO_Init+0x34c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x22a>
 8002682:	2306      	movs	r3, #6
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002686:	2307      	movs	r3, #7
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800269e:	2300      	movs	r3, #0
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b0:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_GPIO_Init+0x350>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_GPIO_Init+0x350>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f ae78 	bne.w	800246c <HAL_GPIO_Init+0x10>
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	48001400 	.word	0x48001400
 80027a8:	48001800 	.word	0x48001800
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e001      	b.n	80027d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f806 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40010400 	.word	0x40010400

08002810 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <__errno>:
 8002828:	4b01      	ldr	r3, [pc, #4]	; (8002830 <__errno+0x8>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	2000713c 	.word	0x2000713c

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4d0d      	ldr	r5, [pc, #52]	; (800286c <__libc_init_array+0x38>)
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	2600      	movs	r6, #0
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	4d0b      	ldr	r5, [pc, #44]	; (8002874 <__libc_init_array+0x40>)
 8002846:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x44>)
 8002848:	f000 fc9e 	bl	8003188 <_init>
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	2600      	movs	r6, #0
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	08003514 	.word	0x08003514
 8002870:	08003514 	.word	0x08003514
 8002874:	08003514 	.word	0x08003514
 8002878:	08003518 	.word	0x08003518

0800287c <malloc>:
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <malloc+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f000 b88d 	b.w	80029a0 <_malloc_r>
 8002886:	bf00      	nop
 8002888:	2000713c 	.word	0x2000713c

0800288c <free>:
 800288c:	4b02      	ldr	r3, [pc, #8]	; (8002898 <free+0xc>)
 800288e:	4601      	mov	r1, r0
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	f000 b819 	b.w	80028c8 <_free_r>
 8002896:	bf00      	nop
 8002898:	2000713c 	.word	0x2000713c

0800289c <memcpy>:
 800289c:	440a      	add	r2, r1
 800289e:	4291      	cmp	r1, r2
 80028a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80028a4:	d100      	bne.n	80028a8 <memcpy+0xc>
 80028a6:	4770      	bx	lr
 80028a8:	b510      	push	{r4, lr}
 80028aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028b2:	4291      	cmp	r1, r2
 80028b4:	d1f9      	bne.n	80028aa <memcpy+0xe>
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <memset>:
 80028b8:	4402      	add	r2, r0
 80028ba:	4603      	mov	r3, r0
 80028bc:	4293      	cmp	r3, r2
 80028be:	d100      	bne.n	80028c2 <memset+0xa>
 80028c0:	4770      	bx	lr
 80028c2:	f803 1b01 	strb.w	r1, [r3], #1
 80028c6:	e7f9      	b.n	80028bc <memset+0x4>

080028c8 <_free_r>:
 80028c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ca:	2900      	cmp	r1, #0
 80028cc:	d044      	beq.n	8002958 <_free_r+0x90>
 80028ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028d2:	9001      	str	r0, [sp, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f1a1 0404 	sub.w	r4, r1, #4
 80028da:	bfb8      	it	lt
 80028dc:	18e4      	addlt	r4, r4, r3
 80028de:	f000 f903 	bl	8002ae8 <__malloc_lock>
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <_free_r+0x94>)
 80028e4:	9801      	ldr	r0, [sp, #4]
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	b933      	cbnz	r3, 80028f8 <_free_r+0x30>
 80028ea:	6063      	str	r3, [r4, #4]
 80028ec:	6014      	str	r4, [r2, #0]
 80028ee:	b003      	add	sp, #12
 80028f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028f4:	f000 b8fe 	b.w	8002af4 <__malloc_unlock>
 80028f8:	42a3      	cmp	r3, r4
 80028fa:	d908      	bls.n	800290e <_free_r+0x46>
 80028fc:	6825      	ldr	r5, [r4, #0]
 80028fe:	1961      	adds	r1, r4, r5
 8002900:	428b      	cmp	r3, r1
 8002902:	bf01      	itttt	eq
 8002904:	6819      	ldreq	r1, [r3, #0]
 8002906:	685b      	ldreq	r3, [r3, #4]
 8002908:	1949      	addeq	r1, r1, r5
 800290a:	6021      	streq	r1, [r4, #0]
 800290c:	e7ed      	b.n	80028ea <_free_r+0x22>
 800290e:	461a      	mov	r2, r3
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	b10b      	cbz	r3, 8002918 <_free_r+0x50>
 8002914:	42a3      	cmp	r3, r4
 8002916:	d9fa      	bls.n	800290e <_free_r+0x46>
 8002918:	6811      	ldr	r1, [r2, #0]
 800291a:	1855      	adds	r5, r2, r1
 800291c:	42a5      	cmp	r5, r4
 800291e:	d10b      	bne.n	8002938 <_free_r+0x70>
 8002920:	6824      	ldr	r4, [r4, #0]
 8002922:	4421      	add	r1, r4
 8002924:	1854      	adds	r4, r2, r1
 8002926:	42a3      	cmp	r3, r4
 8002928:	6011      	str	r1, [r2, #0]
 800292a:	d1e0      	bne.n	80028ee <_free_r+0x26>
 800292c:	681c      	ldr	r4, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	6053      	str	r3, [r2, #4]
 8002932:	4421      	add	r1, r4
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	e7da      	b.n	80028ee <_free_r+0x26>
 8002938:	d902      	bls.n	8002940 <_free_r+0x78>
 800293a:	230c      	movs	r3, #12
 800293c:	6003      	str	r3, [r0, #0]
 800293e:	e7d6      	b.n	80028ee <_free_r+0x26>
 8002940:	6825      	ldr	r5, [r4, #0]
 8002942:	1961      	adds	r1, r4, r5
 8002944:	428b      	cmp	r3, r1
 8002946:	bf04      	itt	eq
 8002948:	6819      	ldreq	r1, [r3, #0]
 800294a:	685b      	ldreq	r3, [r3, #4]
 800294c:	6063      	str	r3, [r4, #4]
 800294e:	bf04      	itt	eq
 8002950:	1949      	addeq	r1, r1, r5
 8002952:	6021      	streq	r1, [r4, #0]
 8002954:	6054      	str	r4, [r2, #4]
 8002956:	e7ca      	b.n	80028ee <_free_r+0x26>
 8002958:	b003      	add	sp, #12
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	2000a1f0 	.word	0x2000a1f0

08002960 <sbrk_aligned>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	4e0e      	ldr	r6, [pc, #56]	; (800299c <sbrk_aligned+0x3c>)
 8002964:	460c      	mov	r4, r1
 8002966:	6831      	ldr	r1, [r6, #0]
 8002968:	4605      	mov	r5, r0
 800296a:	b911      	cbnz	r1, 8002972 <sbrk_aligned+0x12>
 800296c:	f000 f88c 	bl	8002a88 <_sbrk_r>
 8002970:	6030      	str	r0, [r6, #0]
 8002972:	4621      	mov	r1, r4
 8002974:	4628      	mov	r0, r5
 8002976:	f000 f887 	bl	8002a88 <_sbrk_r>
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	d00a      	beq.n	8002994 <sbrk_aligned+0x34>
 800297e:	1cc4      	adds	r4, r0, #3
 8002980:	f024 0403 	bic.w	r4, r4, #3
 8002984:	42a0      	cmp	r0, r4
 8002986:	d007      	beq.n	8002998 <sbrk_aligned+0x38>
 8002988:	1a21      	subs	r1, r4, r0
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f87c 	bl	8002a88 <_sbrk_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d101      	bne.n	8002998 <sbrk_aligned+0x38>
 8002994:	f04f 34ff 	mov.w	r4, #4294967295
 8002998:	4620      	mov	r0, r4
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	2000a1f4 	.word	0x2000a1f4

080029a0 <_malloc_r>:
 80029a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a4:	1ccd      	adds	r5, r1, #3
 80029a6:	f025 0503 	bic.w	r5, r5, #3
 80029aa:	3508      	adds	r5, #8
 80029ac:	2d0c      	cmp	r5, #12
 80029ae:	bf38      	it	cc
 80029b0:	250c      	movcc	r5, #12
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	4607      	mov	r7, r0
 80029b6:	db01      	blt.n	80029bc <_malloc_r+0x1c>
 80029b8:	42a9      	cmp	r1, r5
 80029ba:	d905      	bls.n	80029c8 <_malloc_r+0x28>
 80029bc:	230c      	movs	r3, #12
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	2600      	movs	r6, #0
 80029c2:	4630      	mov	r0, r6
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029c8:	4e2e      	ldr	r6, [pc, #184]	; (8002a84 <_malloc_r+0xe4>)
 80029ca:	f000 f88d 	bl	8002ae8 <__malloc_lock>
 80029ce:	6833      	ldr	r3, [r6, #0]
 80029d0:	461c      	mov	r4, r3
 80029d2:	bb34      	cbnz	r4, 8002a22 <_malloc_r+0x82>
 80029d4:	4629      	mov	r1, r5
 80029d6:	4638      	mov	r0, r7
 80029d8:	f7ff ffc2 	bl	8002960 <sbrk_aligned>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	4604      	mov	r4, r0
 80029e0:	d14d      	bne.n	8002a7e <_malloc_r+0xde>
 80029e2:	6834      	ldr	r4, [r6, #0]
 80029e4:	4626      	mov	r6, r4
 80029e6:	2e00      	cmp	r6, #0
 80029e8:	d140      	bne.n	8002a6c <_malloc_r+0xcc>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	4631      	mov	r1, r6
 80029ee:	4638      	mov	r0, r7
 80029f0:	eb04 0803 	add.w	r8, r4, r3
 80029f4:	f000 f848 	bl	8002a88 <_sbrk_r>
 80029f8:	4580      	cmp	r8, r0
 80029fa:	d13a      	bne.n	8002a72 <_malloc_r+0xd2>
 80029fc:	6821      	ldr	r1, [r4, #0]
 80029fe:	3503      	adds	r5, #3
 8002a00:	1a6d      	subs	r5, r5, r1
 8002a02:	f025 0503 	bic.w	r5, r5, #3
 8002a06:	3508      	adds	r5, #8
 8002a08:	2d0c      	cmp	r5, #12
 8002a0a:	bf38      	it	cc
 8002a0c:	250c      	movcc	r5, #12
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4638      	mov	r0, r7
 8002a12:	f7ff ffa5 	bl	8002960 <sbrk_aligned>
 8002a16:	3001      	adds	r0, #1
 8002a18:	d02b      	beq.n	8002a72 <_malloc_r+0xd2>
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	442b      	add	r3, r5
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	e00e      	b.n	8002a40 <_malloc_r+0xa0>
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	1b52      	subs	r2, r2, r5
 8002a26:	d41e      	bmi.n	8002a66 <_malloc_r+0xc6>
 8002a28:	2a0b      	cmp	r2, #11
 8002a2a:	d916      	bls.n	8002a5a <_malloc_r+0xba>
 8002a2c:	1961      	adds	r1, r4, r5
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	6025      	str	r5, [r4, #0]
 8002a32:	bf18      	it	ne
 8002a34:	6059      	strne	r1, [r3, #4]
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	bf08      	it	eq
 8002a3a:	6031      	streq	r1, [r6, #0]
 8002a3c:	5162      	str	r2, [r4, r5]
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	4638      	mov	r0, r7
 8002a42:	f104 060b 	add.w	r6, r4, #11
 8002a46:	f000 f855 	bl	8002af4 <__malloc_unlock>
 8002a4a:	f026 0607 	bic.w	r6, r6, #7
 8002a4e:	1d23      	adds	r3, r4, #4
 8002a50:	1af2      	subs	r2, r6, r3
 8002a52:	d0b6      	beq.n	80029c2 <_malloc_r+0x22>
 8002a54:	1b9b      	subs	r3, r3, r6
 8002a56:	50a3      	str	r3, [r4, r2]
 8002a58:	e7b3      	b.n	80029c2 <_malloc_r+0x22>
 8002a5a:	6862      	ldr	r2, [r4, #4]
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	bf0c      	ite	eq
 8002a60:	6032      	streq	r2, [r6, #0]
 8002a62:	605a      	strne	r2, [r3, #4]
 8002a64:	e7ec      	b.n	8002a40 <_malloc_r+0xa0>
 8002a66:	4623      	mov	r3, r4
 8002a68:	6864      	ldr	r4, [r4, #4]
 8002a6a:	e7b2      	b.n	80029d2 <_malloc_r+0x32>
 8002a6c:	4634      	mov	r4, r6
 8002a6e:	6876      	ldr	r6, [r6, #4]
 8002a70:	e7b9      	b.n	80029e6 <_malloc_r+0x46>
 8002a72:	230c      	movs	r3, #12
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4638      	mov	r0, r7
 8002a78:	f000 f83c 	bl	8002af4 <__malloc_unlock>
 8002a7c:	e7a1      	b.n	80029c2 <_malloc_r+0x22>
 8002a7e:	6025      	str	r5, [r4, #0]
 8002a80:	e7de      	b.n	8002a40 <_malloc_r+0xa0>
 8002a82:	bf00      	nop
 8002a84:	2000a1f0 	.word	0x2000a1f0

08002a88 <_sbrk_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4d06      	ldr	r5, [pc, #24]	; (8002aa4 <_sbrk_r+0x1c>)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f7ff f8b6 	bl	8001c04 <_sbrk>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk_r+0x1a>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b103      	cbz	r3, 8002aa2 <_sbrk_r+0x1a>
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
 8002aa4:	2000a1f8 	.word	0x2000a1f8

08002aa8 <_vsiprintf_r>:
 8002aa8:	b500      	push	{lr}
 8002aaa:	b09b      	sub	sp, #108	; 0x6c
 8002aac:	9100      	str	r1, [sp, #0]
 8002aae:	9104      	str	r1, [sp, #16]
 8002ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ab4:	9105      	str	r1, [sp, #20]
 8002ab6:	9102      	str	r1, [sp, #8]
 8002ab8:	4905      	ldr	r1, [pc, #20]	; (8002ad0 <_vsiprintf_r+0x28>)
 8002aba:	9103      	str	r1, [sp, #12]
 8002abc:	4669      	mov	r1, sp
 8002abe:	f000 f87b 	bl	8002bb8 <_svfiprintf_r>
 8002ac2:	9b00      	ldr	r3, [sp, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	b01b      	add	sp, #108	; 0x6c
 8002aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ace:	bf00      	nop
 8002ad0:	ffff0208 	.word	0xffff0208

08002ad4 <vsiprintf>:
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	4601      	mov	r1, r0
 8002ada:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <vsiprintf+0x10>)
 8002adc:	6800      	ldr	r0, [r0, #0]
 8002ade:	f7ff bfe3 	b.w	8002aa8 <_vsiprintf_r>
 8002ae2:	bf00      	nop
 8002ae4:	2000713c 	.word	0x2000713c

08002ae8 <__malloc_lock>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__malloc_lock+0x8>)
 8002aea:	f000 baf9 	b.w	80030e0 <__retarget_lock_acquire_recursive>
 8002aee:	bf00      	nop
 8002af0:	2000a1fc 	.word	0x2000a1fc

08002af4 <__malloc_unlock>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__malloc_unlock+0x8>)
 8002af6:	f000 baf4 	b.w	80030e2 <__retarget_lock_release_recursive>
 8002afa:	bf00      	nop
 8002afc:	2000a1fc 	.word	0x2000a1fc

08002b00 <__ssputs_r>:
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	688e      	ldr	r6, [r1, #8]
 8002b06:	429e      	cmp	r6, r3
 8002b08:	4682      	mov	sl, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	4690      	mov	r8, r2
 8002b0e:	461f      	mov	r7, r3
 8002b10:	d838      	bhi.n	8002b84 <__ssputs_r+0x84>
 8002b12:	898a      	ldrh	r2, [r1, #12]
 8002b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b18:	d032      	beq.n	8002b80 <__ssputs_r+0x80>
 8002b1a:	6825      	ldr	r5, [r4, #0]
 8002b1c:	6909      	ldr	r1, [r1, #16]
 8002b1e:	eba5 0901 	sub.w	r9, r5, r1
 8002b22:	6965      	ldr	r5, [r4, #20]
 8002b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	444b      	add	r3, r9
 8002b30:	106d      	asrs	r5, r5, #1
 8002b32:	429d      	cmp	r5, r3
 8002b34:	bf38      	it	cc
 8002b36:	461d      	movcc	r5, r3
 8002b38:	0553      	lsls	r3, r2, #21
 8002b3a:	d531      	bpl.n	8002ba0 <__ssputs_r+0xa0>
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f7ff ff2f 	bl	80029a0 <_malloc_r>
 8002b42:	4606      	mov	r6, r0
 8002b44:	b950      	cbnz	r0, 8002b5c <__ssputs_r+0x5c>
 8002b46:	230c      	movs	r3, #12
 8002b48:	f8ca 3000 	str.w	r3, [sl]
 8002b4c:	89a3      	ldrh	r3, [r4, #12]
 8002b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5c:	6921      	ldr	r1, [r4, #16]
 8002b5e:	464a      	mov	r2, r9
 8002b60:	f7ff fe9c 	bl	800289c <memcpy>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	6126      	str	r6, [r4, #16]
 8002b72:	6165      	str	r5, [r4, #20]
 8002b74:	444e      	add	r6, r9
 8002b76:	eba5 0509 	sub.w	r5, r5, r9
 8002b7a:	6026      	str	r6, [r4, #0]
 8002b7c:	60a5      	str	r5, [r4, #8]
 8002b7e:	463e      	mov	r6, r7
 8002b80:	42be      	cmp	r6, r7
 8002b82:	d900      	bls.n	8002b86 <__ssputs_r+0x86>
 8002b84:	463e      	mov	r6, r7
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	4632      	mov	r2, r6
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	f000 faaa 	bl	80030e4 <memmove>
 8002b90:	68a3      	ldr	r3, [r4, #8]
 8002b92:	1b9b      	subs	r3, r3, r6
 8002b94:	60a3      	str	r3, [r4, #8]
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	4433      	add	r3, r6
 8002b9a:	6023      	str	r3, [r4, #0]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e7db      	b.n	8002b58 <__ssputs_r+0x58>
 8002ba0:	462a      	mov	r2, r5
 8002ba2:	f000 fab9 	bl	8003118 <_realloc_r>
 8002ba6:	4606      	mov	r6, r0
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d1e1      	bne.n	8002b70 <__ssputs_r+0x70>
 8002bac:	6921      	ldr	r1, [r4, #16]
 8002bae:	4650      	mov	r0, sl
 8002bb0:	f7ff fe8a 	bl	80028c8 <_free_r>
 8002bb4:	e7c7      	b.n	8002b46 <__ssputs_r+0x46>
	...

08002bb8 <_svfiprintf_r>:
 8002bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	4698      	mov	r8, r3
 8002bbe:	898b      	ldrh	r3, [r1, #12]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	b09d      	sub	sp, #116	; 0x74
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	d50e      	bpl.n	8002bea <_svfiprintf_r+0x32>
 8002bcc:	690b      	ldr	r3, [r1, #16]
 8002bce:	b963      	cbnz	r3, 8002bea <_svfiprintf_r+0x32>
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	f7ff fee5 	bl	80029a0 <_malloc_r>
 8002bd6:	6028      	str	r0, [r5, #0]
 8002bd8:	6128      	str	r0, [r5, #16]
 8002bda:	b920      	cbnz	r0, 8002be6 <_svfiprintf_r+0x2e>
 8002bdc:	230c      	movs	r3, #12
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	e0d1      	b.n	8002d8a <_svfiprintf_r+0x1d2>
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	616b      	str	r3, [r5, #20]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9309      	str	r3, [sp, #36]	; 0x24
 8002bee:	2320      	movs	r3, #32
 8002bf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bf8:	2330      	movs	r3, #48	; 0x30
 8002bfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002da4 <_svfiprintf_r+0x1ec>
 8002bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c02:	f04f 0901 	mov.w	r9, #1
 8002c06:	4623      	mov	r3, r4
 8002c08:	469a      	mov	sl, r3
 8002c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c0e:	b10a      	cbz	r2, 8002c14 <_svfiprintf_r+0x5c>
 8002c10:	2a25      	cmp	r2, #37	; 0x25
 8002c12:	d1f9      	bne.n	8002c08 <_svfiprintf_r+0x50>
 8002c14:	ebba 0b04 	subs.w	fp, sl, r4
 8002c18:	d00b      	beq.n	8002c32 <_svfiprintf_r+0x7a>
 8002c1a:	465b      	mov	r3, fp
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	4629      	mov	r1, r5
 8002c20:	4638      	mov	r0, r7
 8002c22:	f7ff ff6d 	bl	8002b00 <__ssputs_r>
 8002c26:	3001      	adds	r0, #1
 8002c28:	f000 80aa 	beq.w	8002d80 <_svfiprintf_r+0x1c8>
 8002c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c2e:	445a      	add	r2, fp
 8002c30:	9209      	str	r2, [sp, #36]	; 0x24
 8002c32:	f89a 3000 	ldrb.w	r3, [sl]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a2 	beq.w	8002d80 <_svfiprintf_r+0x1c8>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c46:	f10a 0a01 	add.w	sl, sl, #1
 8002c4a:	9304      	str	r3, [sp, #16]
 8002c4c:	9307      	str	r3, [sp, #28]
 8002c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c52:	931a      	str	r3, [sp, #104]	; 0x68
 8002c54:	4654      	mov	r4, sl
 8002c56:	2205      	movs	r2, #5
 8002c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c5c:	4851      	ldr	r0, [pc, #324]	; (8002da4 <_svfiprintf_r+0x1ec>)
 8002c5e:	f7fd fac7 	bl	80001f0 <memchr>
 8002c62:	9a04      	ldr	r2, [sp, #16]
 8002c64:	b9d8      	cbnz	r0, 8002c9e <_svfiprintf_r+0xe6>
 8002c66:	06d0      	lsls	r0, r2, #27
 8002c68:	bf44      	itt	mi
 8002c6a:	2320      	movmi	r3, #32
 8002c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c70:	0711      	lsls	r1, r2, #28
 8002c72:	bf44      	itt	mi
 8002c74:	232b      	movmi	r3, #43	; 0x2b
 8002c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c80:	d015      	beq.n	8002cae <_svfiprintf_r+0xf6>
 8002c82:	9a07      	ldr	r2, [sp, #28]
 8002c84:	4654      	mov	r4, sl
 8002c86:	2000      	movs	r0, #0
 8002c88:	f04f 0c0a 	mov.w	ip, #10
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c92:	3b30      	subs	r3, #48	; 0x30
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d94e      	bls.n	8002d36 <_svfiprintf_r+0x17e>
 8002c98:	b1b0      	cbz	r0, 8002cc8 <_svfiprintf_r+0x110>
 8002c9a:	9207      	str	r2, [sp, #28]
 8002c9c:	e014      	b.n	8002cc8 <_svfiprintf_r+0x110>
 8002c9e:	eba0 0308 	sub.w	r3, r0, r8
 8002ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	46a2      	mov	sl, r4
 8002cac:	e7d2      	b.n	8002c54 <_svfiprintf_r+0x9c>
 8002cae:	9b03      	ldr	r3, [sp, #12]
 8002cb0:	1d19      	adds	r1, r3, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	9103      	str	r1, [sp, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bfbb      	ittet	lt
 8002cba:	425b      	neglt	r3, r3
 8002cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8002cc0:	9307      	strge	r3, [sp, #28]
 8002cc2:	9307      	strlt	r3, [sp, #28]
 8002cc4:	bfb8      	it	lt
 8002cc6:	9204      	strlt	r2, [sp, #16]
 8002cc8:	7823      	ldrb	r3, [r4, #0]
 8002cca:	2b2e      	cmp	r3, #46	; 0x2e
 8002ccc:	d10c      	bne.n	8002ce8 <_svfiprintf_r+0x130>
 8002cce:	7863      	ldrb	r3, [r4, #1]
 8002cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd2:	d135      	bne.n	8002d40 <_svfiprintf_r+0x188>
 8002cd4:	9b03      	ldr	r3, [sp, #12]
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	9203      	str	r2, [sp, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bfb8      	it	lt
 8002ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ce4:	3402      	adds	r4, #2
 8002ce6:	9305      	str	r3, [sp, #20]
 8002ce8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002db4 <_svfiprintf_r+0x1fc>
 8002cec:	7821      	ldrb	r1, [r4, #0]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	f7fd fa7d 	bl	80001f0 <memchr>
 8002cf6:	b140      	cbz	r0, 8002d0a <_svfiprintf_r+0x152>
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	eba0 000a 	sub.w	r0, r0, sl
 8002cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8002d02:	9b04      	ldr	r3, [sp, #16]
 8002d04:	4303      	orrs	r3, r0
 8002d06:	3401      	adds	r4, #1
 8002d08:	9304      	str	r3, [sp, #16]
 8002d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d0e:	4826      	ldr	r0, [pc, #152]	; (8002da8 <_svfiprintf_r+0x1f0>)
 8002d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d14:	2206      	movs	r2, #6
 8002d16:	f7fd fa6b 	bl	80001f0 <memchr>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d038      	beq.n	8002d90 <_svfiprintf_r+0x1d8>
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <_svfiprintf_r+0x1f4>)
 8002d20:	bb1b      	cbnz	r3, 8002d6a <_svfiprintf_r+0x1b2>
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	3307      	adds	r3, #7
 8002d26:	f023 0307 	bic.w	r3, r3, #7
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d30:	4433      	add	r3, r6
 8002d32:	9309      	str	r3, [sp, #36]	; 0x24
 8002d34:	e767      	b.n	8002c06 <_svfiprintf_r+0x4e>
 8002d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e7a5      	b.n	8002c8c <_svfiprintf_r+0xd4>
 8002d40:	2300      	movs	r3, #0
 8002d42:	3401      	adds	r4, #1
 8002d44:	9305      	str	r3, [sp, #20]
 8002d46:	4619      	mov	r1, r3
 8002d48:	f04f 0c0a 	mov.w	ip, #10
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d52:	3a30      	subs	r2, #48	; 0x30
 8002d54:	2a09      	cmp	r2, #9
 8002d56:	d903      	bls.n	8002d60 <_svfiprintf_r+0x1a8>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0c5      	beq.n	8002ce8 <_svfiprintf_r+0x130>
 8002d5c:	9105      	str	r1, [sp, #20]
 8002d5e:	e7c3      	b.n	8002ce8 <_svfiprintf_r+0x130>
 8002d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d64:	4604      	mov	r4, r0
 8002d66:	2301      	movs	r3, #1
 8002d68:	e7f0      	b.n	8002d4c <_svfiprintf_r+0x194>
 8002d6a:	ab03      	add	r3, sp, #12
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <_svfiprintf_r+0x1f8>)
 8002d72:	a904      	add	r1, sp, #16
 8002d74:	4638      	mov	r0, r7
 8002d76:	f3af 8000 	nop.w
 8002d7a:	1c42      	adds	r2, r0, #1
 8002d7c:	4606      	mov	r6, r0
 8002d7e:	d1d6      	bne.n	8002d2e <_svfiprintf_r+0x176>
 8002d80:	89ab      	ldrh	r3, [r5, #12]
 8002d82:	065b      	lsls	r3, r3, #25
 8002d84:	f53f af2c 	bmi.w	8002be0 <_svfiprintf_r+0x28>
 8002d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d8a:	b01d      	add	sp, #116	; 0x74
 8002d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d90:	ab03      	add	r3, sp, #12
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	462a      	mov	r2, r5
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <_svfiprintf_r+0x1f8>)
 8002d98:	a904      	add	r1, sp, #16
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f000 f87a 	bl	8002e94 <_printf_i>
 8002da0:	e7eb      	b.n	8002d7a <_svfiprintf_r+0x1c2>
 8002da2:	bf00      	nop
 8002da4:	080034df 	.word	0x080034df
 8002da8:	080034e9 	.word	0x080034e9
 8002dac:	00000000 	.word	0x00000000
 8002db0:	08002b01 	.word	0x08002b01
 8002db4:	080034e5 	.word	0x080034e5

08002db8 <_printf_common>:
 8002db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	688a      	ldr	r2, [r1, #8]
 8002dc2:	690b      	ldr	r3, [r1, #16]
 8002dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bfb8      	it	lt
 8002dcc:	4613      	movlt	r3, r2
 8002dce:	6033      	str	r3, [r6, #0]
 8002dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	b10a      	cbz	r2, 8002dde <_printf_common+0x26>
 8002dda:	3301      	adds	r3, #1
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	0699      	lsls	r1, r3, #26
 8002de2:	bf42      	ittt	mi
 8002de4:	6833      	ldrmi	r3, [r6, #0]
 8002de6:	3302      	addmi	r3, #2
 8002de8:	6033      	strmi	r3, [r6, #0]
 8002dea:	6825      	ldr	r5, [r4, #0]
 8002dec:	f015 0506 	ands.w	r5, r5, #6
 8002df0:	d106      	bne.n	8002e00 <_printf_common+0x48>
 8002df2:	f104 0a19 	add.w	sl, r4, #25
 8002df6:	68e3      	ldr	r3, [r4, #12]
 8002df8:	6832      	ldr	r2, [r6, #0]
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	42ab      	cmp	r3, r5
 8002dfe:	dc26      	bgt.n	8002e4e <_printf_common+0x96>
 8002e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e04:	1e13      	subs	r3, r2, #0
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	bf18      	it	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	0692      	lsls	r2, r2, #26
 8002e0e:	d42b      	bmi.n	8002e68 <_printf_common+0xb0>
 8002e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e14:	4649      	mov	r1, r9
 8002e16:	4638      	mov	r0, r7
 8002e18:	47c0      	blx	r8
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d01e      	beq.n	8002e5c <_printf_common+0xa4>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	68e5      	ldr	r5, [r4, #12]
 8002e22:	6832      	ldr	r2, [r6, #0]
 8002e24:	f003 0306 	and.w	r3, r3, #6
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	bf08      	it	eq
 8002e2c:	1aad      	subeq	r5, r5, r2
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	6922      	ldr	r2, [r4, #16]
 8002e32:	bf0c      	ite	eq
 8002e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e38:	2500      	movne	r5, #0
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	bfc4      	itt	gt
 8002e3e:	1a9b      	subgt	r3, r3, r2
 8002e40:	18ed      	addgt	r5, r5, r3
 8002e42:	2600      	movs	r6, #0
 8002e44:	341a      	adds	r4, #26
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d11a      	bne.n	8002e80 <_printf_common+0xc8>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e008      	b.n	8002e60 <_printf_common+0xa8>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4649      	mov	r1, r9
 8002e54:	4638      	mov	r0, r7
 8002e56:	47c0      	blx	r8
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_printf_common+0xac>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7c6      	b.n	8002df6 <_printf_common+0x3e>
 8002e68:	18e1      	adds	r1, r4, r3
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	2030      	movs	r0, #48	; 0x30
 8002e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e72:	4422      	add	r2, r4
 8002e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	e7c7      	b.n	8002e10 <_printf_common+0x58>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4622      	mov	r2, r4
 8002e84:	4649      	mov	r1, r9
 8002e86:	4638      	mov	r0, r7
 8002e88:	47c0      	blx	r8
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0e6      	beq.n	8002e5c <_printf_common+0xa4>
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7d9      	b.n	8002e46 <_printf_common+0x8e>
	...

08002e94 <_printf_i>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	7e0f      	ldrb	r7, [r1, #24]
 8002e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e9c:	2f78      	cmp	r7, #120	; 0x78
 8002e9e:	4691      	mov	r9, r2
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	469a      	mov	sl, r3
 8002ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002eaa:	d807      	bhi.n	8002ebc <_printf_i+0x28>
 8002eac:	2f62      	cmp	r7, #98	; 0x62
 8002eae:	d80a      	bhi.n	8002ec6 <_printf_i+0x32>
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	f000 80d8 	beq.w	8003066 <_printf_i+0x1d2>
 8002eb6:	2f58      	cmp	r7, #88	; 0x58
 8002eb8:	f000 80a3 	beq.w	8003002 <_printf_i+0x16e>
 8002ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ec4:	e03a      	b.n	8002f3c <_printf_i+0xa8>
 8002ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eca:	2b15      	cmp	r3, #21
 8002ecc:	d8f6      	bhi.n	8002ebc <_printf_i+0x28>
 8002ece:	a101      	add	r1, pc, #4	; (adr r1, 8002ed4 <_printf_i+0x40>)
 8002ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002ebd 	.word	0x08002ebd
 8002ee0:	08002ebd 	.word	0x08002ebd
 8002ee4:	08002ebd 	.word	0x08002ebd
 8002ee8:	08002ebd 	.word	0x08002ebd
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002ebd 	.word	0x08002ebd
 8002ef4:	08002ebd 	.word	0x08002ebd
 8002ef8:	08002ebd 	.word	0x08002ebd
 8002efc:	08002ebd 	.word	0x08002ebd
 8002f00:	0800304d 	.word	0x0800304d
 8002f04:	08002f71 	.word	0x08002f71
 8002f08:	0800302f 	.word	0x0800302f
 8002f0c:	08002ebd 	.word	0x08002ebd
 8002f10:	08002ebd 	.word	0x08002ebd
 8002f14:	0800306f 	.word	0x0800306f
 8002f18:	08002ebd 	.word	0x08002ebd
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002ebd 	.word	0x08002ebd
 8002f24:	08002ebd 	.word	0x08002ebd
 8002f28:	08003037 	.word	0x08003037
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	602a      	str	r2, [r5, #0]
 8002f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0a3      	b.n	8003088 <_printf_i+0x1f4>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	6829      	ldr	r1, [r5, #0]
 8002f44:	0606      	lsls	r6, r0, #24
 8002f46:	f101 0304 	add.w	r3, r1, #4
 8002f4a:	d50a      	bpl.n	8002f62 <_printf_i+0xce>
 8002f4c:	680e      	ldr	r6, [r1, #0]
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	2e00      	cmp	r6, #0
 8002f52:	da03      	bge.n	8002f5c <_printf_i+0xc8>
 8002f54:	232d      	movs	r3, #45	; 0x2d
 8002f56:	4276      	negs	r6, r6
 8002f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5c:	485e      	ldr	r0, [pc, #376]	; (80030d8 <_printf_i+0x244>)
 8002f5e:	230a      	movs	r3, #10
 8002f60:	e019      	b.n	8002f96 <_printf_i+0x102>
 8002f62:	680e      	ldr	r6, [r1, #0]
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f6a:	bf18      	it	ne
 8002f6c:	b236      	sxthne	r6, r6
 8002f6e:	e7ef      	b.n	8002f50 <_printf_i+0xbc>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	1d19      	adds	r1, r3, #4
 8002f76:	6029      	str	r1, [r5, #0]
 8002f78:	0601      	lsls	r1, r0, #24
 8002f7a:	d501      	bpl.n	8002f80 <_printf_i+0xec>
 8002f7c:	681e      	ldr	r6, [r3, #0]
 8002f7e:	e002      	b.n	8002f86 <_printf_i+0xf2>
 8002f80:	0646      	lsls	r6, r0, #25
 8002f82:	d5fb      	bpl.n	8002f7c <_printf_i+0xe8>
 8002f84:	881e      	ldrh	r6, [r3, #0]
 8002f86:	4854      	ldr	r0, [pc, #336]	; (80030d8 <_printf_i+0x244>)
 8002f88:	2f6f      	cmp	r7, #111	; 0x6f
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2308      	moveq	r3, #8
 8002f8e:	230a      	movne	r3, #10
 8002f90:	2100      	movs	r1, #0
 8002f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f96:	6865      	ldr	r5, [r4, #4]
 8002f98:	60a5      	str	r5, [r4, #8]
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	bfa2      	ittt	ge
 8002f9e:	6821      	ldrge	r1, [r4, #0]
 8002fa0:	f021 0104 	bicge.w	r1, r1, #4
 8002fa4:	6021      	strge	r1, [r4, #0]
 8002fa6:	b90e      	cbnz	r6, 8002fac <_printf_i+0x118>
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	d04d      	beq.n	8003048 <_printf_i+0x1b4>
 8002fac:	4615      	mov	r5, r2
 8002fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8002fb6:	5dc7      	ldrb	r7, [r0, r7]
 8002fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fbc:	4637      	mov	r7, r6
 8002fbe:	42bb      	cmp	r3, r7
 8002fc0:	460e      	mov	r6, r1
 8002fc2:	d9f4      	bls.n	8002fae <_printf_i+0x11a>
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d10b      	bne.n	8002fe0 <_printf_i+0x14c>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	07de      	lsls	r6, r3, #31
 8002fcc:	d508      	bpl.n	8002fe0 <_printf_i+0x14c>
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	6861      	ldr	r1, [r4, #4]
 8002fd2:	4299      	cmp	r1, r3
 8002fd4:	bfde      	ittt	le
 8002fd6:	2330      	movle	r3, #48	; 0x30
 8002fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fe0:	1b52      	subs	r2, r2, r5
 8002fe2:	6122      	str	r2, [r4, #16]
 8002fe4:	f8cd a000 	str.w	sl, [sp]
 8002fe8:	464b      	mov	r3, r9
 8002fea:	aa03      	add	r2, sp, #12
 8002fec:	4621      	mov	r1, r4
 8002fee:	4640      	mov	r0, r8
 8002ff0:	f7ff fee2 	bl	8002db8 <_printf_common>
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	d14c      	bne.n	8003092 <_printf_i+0x1fe>
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	b004      	add	sp, #16
 8002ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003002:	4835      	ldr	r0, [pc, #212]	; (80030d8 <_printf_i+0x244>)
 8003004:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003008:	6829      	ldr	r1, [r5, #0]
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003010:	6029      	str	r1, [r5, #0]
 8003012:	061d      	lsls	r5, r3, #24
 8003014:	d514      	bpl.n	8003040 <_printf_i+0x1ac>
 8003016:	07df      	lsls	r7, r3, #31
 8003018:	bf44      	itt	mi
 800301a:	f043 0320 	orrmi.w	r3, r3, #32
 800301e:	6023      	strmi	r3, [r4, #0]
 8003020:	b91e      	cbnz	r6, 800302a <_printf_i+0x196>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f023 0320 	bic.w	r3, r3, #32
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	2310      	movs	r3, #16
 800302c:	e7b0      	b.n	8002f90 <_printf_i+0xfc>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	2378      	movs	r3, #120	; 0x78
 8003038:	4828      	ldr	r0, [pc, #160]	; (80030dc <_printf_i+0x248>)
 800303a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800303e:	e7e3      	b.n	8003008 <_printf_i+0x174>
 8003040:	0659      	lsls	r1, r3, #25
 8003042:	bf48      	it	mi
 8003044:	b2b6      	uxthmi	r6, r6
 8003046:	e7e6      	b.n	8003016 <_printf_i+0x182>
 8003048:	4615      	mov	r5, r2
 800304a:	e7bb      	b.n	8002fc4 <_printf_i+0x130>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	6826      	ldr	r6, [r4, #0]
 8003050:	6961      	ldr	r1, [r4, #20]
 8003052:	1d18      	adds	r0, r3, #4
 8003054:	6028      	str	r0, [r5, #0]
 8003056:	0635      	lsls	r5, r6, #24
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	d501      	bpl.n	8003060 <_printf_i+0x1cc>
 800305c:	6019      	str	r1, [r3, #0]
 800305e:	e002      	b.n	8003066 <_printf_i+0x1d2>
 8003060:	0670      	lsls	r0, r6, #25
 8003062:	d5fb      	bpl.n	800305c <_printf_i+0x1c8>
 8003064:	8019      	strh	r1, [r3, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	6123      	str	r3, [r4, #16]
 800306a:	4615      	mov	r5, r2
 800306c:	e7ba      	b.n	8002fe4 <_printf_i+0x150>
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	602a      	str	r2, [r5, #0]
 8003074:	681d      	ldr	r5, [r3, #0]
 8003076:	6862      	ldr	r2, [r4, #4]
 8003078:	2100      	movs	r1, #0
 800307a:	4628      	mov	r0, r5
 800307c:	f7fd f8b8 	bl	80001f0 <memchr>
 8003080:	b108      	cbz	r0, 8003086 <_printf_i+0x1f2>
 8003082:	1b40      	subs	r0, r0, r5
 8003084:	6060      	str	r0, [r4, #4]
 8003086:	6863      	ldr	r3, [r4, #4]
 8003088:	6123      	str	r3, [r4, #16]
 800308a:	2300      	movs	r3, #0
 800308c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003090:	e7a8      	b.n	8002fe4 <_printf_i+0x150>
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	462a      	mov	r2, r5
 8003096:	4649      	mov	r1, r9
 8003098:	4640      	mov	r0, r8
 800309a:	47d0      	blx	sl
 800309c:	3001      	adds	r0, #1
 800309e:	d0ab      	beq.n	8002ff8 <_printf_i+0x164>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	079b      	lsls	r3, r3, #30
 80030a4:	d413      	bmi.n	80030ce <_printf_i+0x23a>
 80030a6:	68e0      	ldr	r0, [r4, #12]
 80030a8:	9b03      	ldr	r3, [sp, #12]
 80030aa:	4298      	cmp	r0, r3
 80030ac:	bfb8      	it	lt
 80030ae:	4618      	movlt	r0, r3
 80030b0:	e7a4      	b.n	8002ffc <_printf_i+0x168>
 80030b2:	2301      	movs	r3, #1
 80030b4:	4632      	mov	r2, r6
 80030b6:	4649      	mov	r1, r9
 80030b8:	4640      	mov	r0, r8
 80030ba:	47d0      	blx	sl
 80030bc:	3001      	adds	r0, #1
 80030be:	d09b      	beq.n	8002ff8 <_printf_i+0x164>
 80030c0:	3501      	adds	r5, #1
 80030c2:	68e3      	ldr	r3, [r4, #12]
 80030c4:	9903      	ldr	r1, [sp, #12]
 80030c6:	1a5b      	subs	r3, r3, r1
 80030c8:	42ab      	cmp	r3, r5
 80030ca:	dcf2      	bgt.n	80030b2 <_printf_i+0x21e>
 80030cc:	e7eb      	b.n	80030a6 <_printf_i+0x212>
 80030ce:	2500      	movs	r5, #0
 80030d0:	f104 0619 	add.w	r6, r4, #25
 80030d4:	e7f5      	b.n	80030c2 <_printf_i+0x22e>
 80030d6:	bf00      	nop
 80030d8:	080034f0 	.word	0x080034f0
 80030dc:	08003501 	.word	0x08003501

080030e0 <__retarget_lock_acquire_recursive>:
 80030e0:	4770      	bx	lr

080030e2 <__retarget_lock_release_recursive>:
 80030e2:	4770      	bx	lr

080030e4 <memmove>:
 80030e4:	4288      	cmp	r0, r1
 80030e6:	b510      	push	{r4, lr}
 80030e8:	eb01 0402 	add.w	r4, r1, r2
 80030ec:	d902      	bls.n	80030f4 <memmove+0x10>
 80030ee:	4284      	cmp	r4, r0
 80030f0:	4623      	mov	r3, r4
 80030f2:	d807      	bhi.n	8003104 <memmove+0x20>
 80030f4:	1e43      	subs	r3, r0, #1
 80030f6:	42a1      	cmp	r1, r4
 80030f8:	d008      	beq.n	800310c <memmove+0x28>
 80030fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003102:	e7f8      	b.n	80030f6 <memmove+0x12>
 8003104:	4402      	add	r2, r0
 8003106:	4601      	mov	r1, r0
 8003108:	428a      	cmp	r2, r1
 800310a:	d100      	bne.n	800310e <memmove+0x2a>
 800310c:	bd10      	pop	{r4, pc}
 800310e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003116:	e7f7      	b.n	8003108 <memmove+0x24>

08003118 <_realloc_r>:
 8003118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311c:	4680      	mov	r8, r0
 800311e:	4614      	mov	r4, r2
 8003120:	460e      	mov	r6, r1
 8003122:	b921      	cbnz	r1, 800312e <_realloc_r+0x16>
 8003124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003128:	4611      	mov	r1, r2
 800312a:	f7ff bc39 	b.w	80029a0 <_malloc_r>
 800312e:	b92a      	cbnz	r2, 800313c <_realloc_r+0x24>
 8003130:	f7ff fbca 	bl	80028c8 <_free_r>
 8003134:	4625      	mov	r5, r4
 8003136:	4628      	mov	r0, r5
 8003138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800313c:	f000 f81b 	bl	8003176 <_malloc_usable_size_r>
 8003140:	4284      	cmp	r4, r0
 8003142:	4607      	mov	r7, r0
 8003144:	d802      	bhi.n	800314c <_realloc_r+0x34>
 8003146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800314a:	d812      	bhi.n	8003172 <_realloc_r+0x5a>
 800314c:	4621      	mov	r1, r4
 800314e:	4640      	mov	r0, r8
 8003150:	f7ff fc26 	bl	80029a0 <_malloc_r>
 8003154:	4605      	mov	r5, r0
 8003156:	2800      	cmp	r0, #0
 8003158:	d0ed      	beq.n	8003136 <_realloc_r+0x1e>
 800315a:	42bc      	cmp	r4, r7
 800315c:	4622      	mov	r2, r4
 800315e:	4631      	mov	r1, r6
 8003160:	bf28      	it	cs
 8003162:	463a      	movcs	r2, r7
 8003164:	f7ff fb9a 	bl	800289c <memcpy>
 8003168:	4631      	mov	r1, r6
 800316a:	4640      	mov	r0, r8
 800316c:	f7ff fbac 	bl	80028c8 <_free_r>
 8003170:	e7e1      	b.n	8003136 <_realloc_r+0x1e>
 8003172:	4635      	mov	r5, r6
 8003174:	e7df      	b.n	8003136 <_realloc_r+0x1e>

08003176 <_malloc_usable_size_r>:
 8003176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800317a:	1f18      	subs	r0, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfbc      	itt	lt
 8003180:	580b      	ldrlt	r3, [r1, r0]
 8003182:	18c0      	addlt	r0, r0, r3
 8003184:	4770      	bx	lr
	...

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
